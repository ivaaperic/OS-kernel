GAS LISTING /tmp/ccAx1cNV.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB49:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** #include "../h/PCB.hpp"
   8:src/riscv.cpp **** #include "../h/_sem.hpp"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** extern "C" void handle_interrupt();
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 12 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 39 is_stmt 0
  22              	#APP
  23              	# 13 "src/riscv.cpp" 1
  14              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 30 is_stmt 0
  28              	# 14 "src/riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE49:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
GAS LISTING /tmp/ccAx1cNV.s 			page 2


  45 0000 67726573 		.string	"greska! SCAUSE: "
  45      6B612120 
  45      53434155 
  45      53453A20 
  45      00
  46 0011 00000000 		.align	3
  46      000000
  47              	.LC1:
  48 0018 494C4547 		.string	"ILEGALNA INSTRUKCIJA"
  48      414C4E41 
  48      20494E53 
  48      5452554B 
  48      43494A41 
  49 002d 000000   		.align	3
  50              	.LC2:
  51 0030 0A00     		.string	"\n"
  52 0032 00000000 		.align	3
  52      0000
  53              	.LC3:
  54 0038 4E45444F 		.string	"NEDOZVOLJENA ADRESA CITANJA"
  54      5A564F4C 
  54      4A454E41 
  54      20414452 
  54      45534120 
  55 0054 00000000 		.align	3
  56              	.LC4:
  57 0058 2000     		.string	" "
  58 005a 00000000 		.align	3
  58      0000
  59              	.LC5:
  60 0060 202000   		.string	"  "
  61 0063 00000000 		.align	3
  61      00
  62              	.LC6:
  63 0068 4E45444F 		.string	"NEDOZVOLJENA ADRESA UPISA"
  63      5A564F4C 
  63      4A454E41 
  63      20414452 
  63      45534120 
  64              		.text
  65              		.align	2
  66              		.globl	_ZN5Riscv21supervisorTrapHandlerEv
  68              	_ZN5Riscv21supervisorTrapHandlerEv:
  69              	.LFB50:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp **** void Riscv::supervisorTrapHandler() {
  70              		.loc 1 17 37 is_stmt 1
  71              		.cfi_startproc
  72 0020 130101F7 		addi	sp,sp,-144
  73              		.cfi_def_cfa_offset 144
  74 0024 23341108 		sd	ra,136(sp)
  75 0028 23308108 		sd	s0,128(sp)
  76 002c 233C9106 		sd	s1,120(sp)
  77 0030 23382107 		sd	s2,112(sp)
  78 0034 23343107 		sd	s3,104(sp)
  79 0038 23304107 		sd	s4,96(sp)
  80              		.cfi_offset 1, -8
GAS LISTING /tmp/ccAx1cNV.s 			page 3


  81              		.cfi_offset 8, -16
  82              		.cfi_offset 9, -24
  83              		.cfi_offset 18, -32
  84              		.cfi_offset 19, -40
  85              		.cfi_offset 20, -48
  86 003c 13040109 		addi	s0,sp,144
  87              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     uint64 volatile a1, a2, a3, a4;
  88              		.loc 1 18 5
  19:src/riscv.cpp ****     __asm__ volatile ("mv %0, a4" : "=r"(a4));
  89              		.loc 1 19 5
  90              		.loc 1 19 46 is_stmt 0
  91              	#APP
  92              	# 19 "src/riscv.cpp" 1
  20              	    uint64 scause = r_scause();
  93              		mv a5, a4
  94              	# 0 "" 2
  95              	#NO_APP
  96 0044 2338F4FA 		sd	a5,-80(s0)
  97              		.loc 1 20 5 is_stmt 1
  98              	.LBB68:
  99              	.LBB69:
 100              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../lib/console.h"
  10:src/../h/riscv.hpp **** #include "MemoryAllocator.hpp"
  11:src/../h/riscv.hpp **** #include "../test/printing.hpp"
  12:src/../h/riscv.hpp **** 
  13:src/../h/riscv.hpp **** class Riscv {
  14:src/../h/riscv.hpp **** public:
  15:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function) inline ne menja ra!!
  16:src/../h/riscv.hpp ****     static void popSppSpie();
  17:src/../h/riscv.hpp **** 
  18:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  19:src/../h/riscv.hpp ****     static void pushRegisters();
  20:src/../h/riscv.hpp **** 
  21:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  22:src/../h/riscv.hpp ****     static void popRegisters();
  23:src/../h/riscv.hpp **** 
  24:src/../h/riscv.hpp ****     // read register scause
  25:src/../h/riscv.hpp ****     static uint64 r_scause();
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp ****     // write register scause
  28:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp ****     // read register sepc
  31:src/../h/riscv.hpp ****     static uint64 r_sepc();
  32:src/../h/riscv.hpp **** 
  33:src/../h/riscv.hpp ****     // write register sepc
  34:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
GAS LISTING /tmp/ccAx1cNV.s 			page 4


  35:src/../h/riscv.hpp **** 
  36:src/../h/riscv.hpp ****     // read register stvec
  37:src/../h/riscv.hpp ****     static uint64 r_stvec();
  38:src/../h/riscv.hpp **** 
  39:src/../h/riscv.hpp ****     // write register stvec
  40:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     static const uint64 get_sepc();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     static void set_sepc(uint64 status);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     // read register stval
  47:src/../h/riscv.hpp ****     static uint64 r_stval();
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     // write register stval
  50:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     enum BitMaskSip {
  53:src/../h/riscv.hpp ****         SIP_SSIE = (1 << 1),
  54:src/../h/riscv.hpp ****         SIP_STIE = (1 << 5),
  55:src/../h/riscv.hpp ****         SIP_SEIE = (1 << 9),
  56:src/../h/riscv.hpp ****     };
  57:src/../h/riscv.hpp **** 
  58:src/../h/riscv.hpp ****     // mask set register sip
  59:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  60:src/../h/riscv.hpp **** 
  61:src/../h/riscv.hpp ****     // mask clear register sip
  62:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  63:src/../h/riscv.hpp **** 
  64:src/../h/riscv.hpp ****     // read register sip
  65:src/../h/riscv.hpp ****     static uint64 r_sip();
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // write register sip
  68:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     enum BitMaskSstatus {
  71:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  72:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  73:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  74:src/../h/riscv.hpp ****     };
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // mask set register sstatus
  77:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // mask clear register sstatus
  80:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // read register sstatus
  83:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // write register sstatus
  86:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     //supervisor trap
  89:src/../h/riscv.hpp ****     static void supervisorTrap();
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** private:
GAS LISTING /tmp/ccAx1cNV.s 			page 5


  92:src/../h/riscv.hpp ****     //rukovaoci prekidima
  93:src/../h/riscv.hpp ****     static void supervisorTrapHandler();
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     void handleSupervisorTrapConsole();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp ****     void handleSupervisorTimerHandler();
  98:src/../h/riscv.hpp **** };
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause() {
 101:src/../h/riscv.hpp ****     uint64 volatile scause;
 101              		.loc 2 101 5
 102:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 102              		.loc 2 102 5
 103              		.loc 2 102 72 is_stmt 0
 104              	#APP
 105              	# 102 "src/../h/riscv.hpp" 1
 103              	    return scause;
 106              		csrr a5, scause
 107              	# 0 "" 2
 108              	#NO_APP
 109 004c 2334F4F8 		sd	a5,-120(s0)
 110              		.loc 2 103 5 is_stmt 1
 111              		.loc 2 103 12 is_stmt 0
 112 0050 033984F8 		ld	s2,-120(s0)
 113              	.LVL0:
 114              	.LBE69:
 115              	.LBE68:
  21:src/riscv.cpp ****     uint64 code;
 116              		.loc 1 21 5 is_stmt 1
  22:src/riscv.cpp ****     __asm__ volatile ("mv %0, a0" : "=r" (code));
 117              		.loc 1 22 5
 118              		.loc 1 22 49 is_stmt 0
 119              	#APP
 120              	# 22 "src/riscv.cpp" 1
  23              	    __asm__ volatile ("mv %0, a1" : "=r"(a1));
 121              		mv s1, a0
 122              	# 0 "" 2
 123              	.LVL1:
 124              		.loc 1 23 5 is_stmt 1
 125              		.loc 1 23 46 is_stmt 0
 126              	# 23 "src/riscv.cpp" 1
  24              	    __asm__ volatile ("mv %0, a2" : "=r"(a2));
 127              		mv a5, a1
 128              	# 0 "" 2
 129              	#NO_APP
 130 005c 2334F4FC 		sd	a5,-56(s0)
 131              		.loc 1 24 5 is_stmt 1
 132              		.loc 1 24 46 is_stmt 0
 133              	#APP
 134              	# 24 "src/riscv.cpp" 1
  25              	    __asm__ volatile ("mv %0, a3" : "=r"(a3));
 135              		mv a5, a2
 136              	# 0 "" 2
 137              	#NO_APP
 138 0064 2330F4FC 		sd	a5,-64(s0)
 139              		.loc 1 25 5 is_stmt 1
 140              		.loc 1 25 46 is_stmt 0
GAS LISTING /tmp/ccAx1cNV.s 			page 6


 141              	#APP
 142              	# 25 "src/riscv.cpp" 1
  26              	
 143              		mv a5, a3
 144              	# 0 "" 2
 145              	#NO_APP
 146 006c 233CF4FA 		sd	a5,-72(s0)
  27:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL) {
 147              		.loc 1 27 5 is_stmt 1
 148              	.LBB70:
 149              		.loc 1 27 40 is_stmt 0
 150 0070 130789FF 		addi	a4,s2,-8
 151              		.loc 1 27 5
 152 0074 93071000 		li	a5,1
 153 0078 63FEE704 		bleu	a4,a5,.L32
 154              	.LBE70:
  28:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  29:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  30:src/riscv.cpp ****         //sepc ukazuje na instrukciju ecall
  31:src/riscv.cpp **** 
  32:src/riscv.cpp ****         if (code == 0x01) {
  33:src/riscv.cpp ****             size_t size = (size_t) a1 * MEM_BLOCK_SIZE;
  34:src/riscv.cpp ****             void *allocated = MemoryAllocator::mem_alloc(size);
  35:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(allocated));
  36:src/riscv.cpp ****         } else if (code == 0x02) {
  37:src/riscv.cpp ****             void *ptr = (void *) a1;
  38:src/riscv.cpp ****             int res = MemoryAllocator::mem_free(ptr);
  39:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  40:src/riscv.cpp ****         } else if (code == 0x11) {
  41:src/riscv.cpp ****             thread_t *handle = (thread_t *) a1;
  42:src/riscv.cpp ****             PCB::Body body = (PCB::Body) a2;
  43:src/riscv.cpp ****             void *arg = (void *) a3;
  44:src/riscv.cpp ****             uint64 *stack_space = (uint64 *) a4;
  45:src/riscv.cpp ****             *handle = PCB::create_thread(body, arg, stack_space);
  46:src/riscv.cpp ****             int res = 1;
  47:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  48:src/riscv.cpp ****         } else if (code == 0x12) {
  49:src/riscv.cpp ****             int res = PCB::thread_exit();
  50:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  51:src/riscv.cpp ****         } else if (code == 0x13) {
  52:src/riscv.cpp ****             PCB::dispatch();
  53:src/riscv.cpp ****         } else if (code == 0x21) {
  54:src/riscv.cpp ****             sem_t *handle = (sem_t *) a1;
  55:src/riscv.cpp ****             unsigned int init = (unsigned int) a2;
  56:src/riscv.cpp ****             *handle = _sem::open(init);
  57:src/riscv.cpp ****             int res = handle != nullptr ? 0 : -1;
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  59:src/riscv.cpp ****         } else if (code == 0x22) {
  60:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
  61:src/riscv.cpp ****             int res = _sem::close(handle);
  62:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  63:src/riscv.cpp ****         } else if (code == 0x23) {
  64:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
  65:src/riscv.cpp ****             int res = _sem::wait(handle);
  66:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  67:src/riscv.cpp ****         } else if (code == 0x24) {
  68:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
GAS LISTING /tmp/ccAx1cNV.s 			page 7


  69:src/riscv.cpp ****             int res = _sem::signal(handle);
  70:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  71:src/riscv.cpp ****         } else if (code == 0x26) {
  72:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
  73:src/riscv.cpp ****             int res = _sem::trywait(handle);
  74:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
  75:src/riscv.cpp ****         } else if (code == 0x41) {
  76:src/riscv.cpp ****             char c = __getc();
  77:src/riscv.cpp ****             __asm__ volatile ("mv a0,%0": : "r"(c));
  78:src/riscv.cpp ****         } else if (code == 0x42) {
  79:src/riscv.cpp ****             char c = (char) a1;
  80:src/riscv.cpp ****             __putc(c);
  81:src/riscv.cpp ****         } else if (code == 0x43) {
  82:src/riscv.cpp ****             mc_sstatus(Riscv::SSTATUS_SPP);
  83:src/riscv.cpp ****         } else if (code == 0x44) {
  84:src/riscv.cpp ****             ms_sstatus(Riscv::SSTATUS_SPP);
  85:src/riscv.cpp ****         }
  86:src/riscv.cpp **** 
  87:src/riscv.cpp ****         if (code != 0x43 && code != 0x44) {
  88:src/riscv.cpp ****             w_sstatus(sstatus);
  89:src/riscv.cpp ****         }
  90:src/riscv.cpp ****         w_sepc(sepc);
  91:src/riscv.cpp ****     } else if (scause == 0x0000000000000002UL) {
 155              		.loc 1 91 12 is_stmt 1
 156              	.LBB233:
 157              	.LBB71:
 158 007c 93072000 		li	a5,2
 159 0080 630EF922 		beq	s2,a5,.L33
 160              	.LBE71:
 161              	.LBE233:
  92:src/riscv.cpp ****         printString("greska! SCAUSE: ");
  93:src/riscv.cpp ****         __putc(scause + '0');
  94:src/riscv.cpp ****         __putc('\n');
  95:src/riscv.cpp ****         printString("ILEGALNA INSTRUKCIJA");
  96:src/riscv.cpp ****         printString("\n");
  97:src/riscv.cpp ****         while (1);
  98:src/riscv.cpp ****         PCB::dispatch();
  99:src/riscv.cpp ****     } else if (scause == 0x0000000000000005UL) {
 162              		.loc 1 99 12
 163              	.LBB234:
 164              	.LBB102:
 165              	.LBB72:
 166 0084 93075000 		li	a5,5
 167 0088 6302F928 		beq	s2,a5,.L34
 168              	.LBE72:
 169              	.LBE102:
 170              	.LBE234:
 100:src/riscv.cpp ****         printString("NEDOZVOLJENA ADRESA CITANJA");
 101:src/riscv.cpp ****         printString(" ");
 102:src/riscv.cpp ****         printInt(Riscv::r_sepc());
 103:src/riscv.cpp ****         printString("  ");
 104:src/riscv.cpp ****         printInt(Riscv::r_scause());
 105:src/riscv.cpp ****         printString(" ");
 106:src/riscv.cpp ****         printInt(Riscv::r_stval());
 107:src/riscv.cpp ****         printString("\n");
 108:src/riscv.cpp ****         while (1);
 109:src/riscv.cpp ****     } else if (scause == 0x0000000000000007UL) {
GAS LISTING /tmp/ccAx1cNV.s 			page 8


 171              		.loc 1 109 12
 172              	.LBB235:
 173              	.LBB103:
 174              	.LBB99:
 175              	.LBB73:
 176 008c 93077000 		li	a5,7
 177 0090 6308F932 		beq	s2,a5,.L35
 178              	.LBE73:
 179              	.LBE99:
 180              	.LBE103:
 181              	.LBE235:
 110:src/riscv.cpp ****         printString("NEDOZVOLJENA ADRESA UPISA");
 111:src/riscv.cpp ****         printString(" ");
 112:src/riscv.cpp ****         printInt(Riscv::r_sepc());
 113:src/riscv.cpp ****         printString(" ");
 114:src/riscv.cpp ****         printInt(Riscv::r_scause());
 115:src/riscv.cpp ****         printString(" ");
 116:src/riscv.cpp ****         printInt(Riscv::r_stval());
 117:src/riscv.cpp ****         printString("\n");
 118:src/riscv.cpp ****         while (1);
 119:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL) {
 182              		.loc 1 119 12
 183              	.LBB236:
 184              	.LBB104:
 185              	.LBB100:
 186              	.LBB91:
 187              	.LBB74:
 188 0094 9307F0FF 		li	a5,-1
 189 0098 9397F703 		slli	a5,a5,63
 190 009c 93879700 		addi	a5,a5,9
 191 00a0 630AF93C 		beq	s2,a5,.L36
 120:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 121:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 122:src/riscv.cpp ****         console_handler();
 123:src/riscv.cpp ****         w_sstatus(sstatus);
 124:src/riscv.cpp ****         w_sepc(sepc);
 125:src/riscv.cpp ****     } else {
 126:src/riscv.cpp ****         printString("greska! SCAUSE: ");
 192              		.loc 1 126 9
 193              		.loc 1 126 20 is_stmt 0
 194 00a4 17050000 		lla	a0,.LC0
 194      13050500 
 195 00ac 97000000 		call	_Z11printStringPKc@plt
 195      E7800000 
 196              	.LVL2:
 127:src/riscv.cpp ****         __putc(scause + '0');
 197              		.loc 1 127 9 is_stmt 1
 198              		.loc 1 127 15 is_stmt 0
 199 00b4 1B050903 		addiw	a0,s2,48
 200 00b8 1375F50F 		andi	a0,a0,0xff
 201 00bc 97000000 		call	__putc@plt
 201      E7800000 
 202              	.LVL3:
 128:src/riscv.cpp ****         __putc('\n');
 203              		.loc 1 128 9 is_stmt 1
 204              		.loc 1 128 15 is_stmt 0
 205 00c4 1305A000 		li	a0,10
GAS LISTING /tmp/ccAx1cNV.s 			page 9


 206 00c8 97000000 		call	__putc@plt
 206      E7800000 
 207              	.LVL4:
 208              	.L29:
 129:src/riscv.cpp ****         while (true);
 209              		.loc 1 129 9 is_stmt 1 discriminator 4
 210              		.loc 1 129 9 discriminator 4
 211 00d0 6F000000 		j	.L29
 212              	.L32:
 213              	.LBE74:
 214              	.LBE91:
 215              	.LBE100:
 216              	.LBE104:
 217              	.LBB105:
  28:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 218              		.loc 1 28 9
 219              	.LBB106:
 220              	.LBB107:
 104:src/../h/riscv.hpp **** }
 105:src/../h/riscv.hpp **** 
 106:src/../h/riscv.hpp **** inline const uint64 Riscv::get_sepc() {
 107:src/../h/riscv.hpp ****     uint64 volatile iret;
 108:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %0, sepc":"=r"(iret));
 109:src/../h/riscv.hpp ****     return iret;
 110:src/../h/riscv.hpp **** }
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp **** inline void Riscv::set_sepc(uint64 status) {
 113:src/../h/riscv.hpp ****     __asm__ volatile("csrw sepc, %0" : :"r"(status));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause) {
 117:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc() {
 121:src/../h/riscv.hpp ****     uint64 volatile sepc;
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 123:src/../h/riscv.hpp ****     return sepc;
 124:src/../h/riscv.hpp **** }
 125:src/../h/riscv.hpp **** 
 126:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc) {
 127:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 128:src/../h/riscv.hpp **** }
 129:src/../h/riscv.hpp **** 
 130:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec() {
 131:src/../h/riscv.hpp ****     uint64 volatile stvec;
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 133:src/../h/riscv.hpp ****     return stvec;
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec) {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval() {
 141:src/../h/riscv.hpp ****     uint64 volatile stval;
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
GAS LISTING /tmp/ccAx1cNV.s 			page 10


 143:src/../h/riscv.hpp ****     return stval;
 144:src/../h/riscv.hpp **** }
 145:src/../h/riscv.hpp **** 
 146:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval) {
 147:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask) {
 151:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask) {
 155:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 156:src/../h/riscv.hpp **** }
 157:src/../h/riscv.hpp **** 
 158:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip() {
 159:src/../h/riscv.hpp ****     uint64 volatile sip;
 160:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 161:src/../h/riscv.hpp ****     return sip;
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip) {
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 166:src/../h/riscv.hpp **** }
 167:src/../h/riscv.hpp **** 
 168:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
 169:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 170:src/../h/riscv.hpp **** }
 171:src/../h/riscv.hpp **** 
 172:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
 173:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus() {
 177:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 221              		.loc 2 177 5
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 222              		.loc 2 178 5
 223              		.loc 2 178 76 is_stmt 0
 224              	#APP
 225              	# 178 "src/../h/riscv.hpp" 1
 179              	    return sstatus;
 226              		csrr a5, sstatus
 227              	# 0 "" 2
 228              	#NO_APP
 229 00d8 233CF4F8 		sd	a5,-104(s0)
 230              		.loc 2 179 5 is_stmt 1
 231              		.loc 2 179 12 is_stmt 0
 232 00dc 033A84F9 		ld	s4,-104(s0)
 233              	.LVL5:
 234              	.LBE107:
 235              	.LBE106:
  29:src/riscv.cpp ****         //sepc ukazuje na instrukciju ecall
 236              		.loc 1 29 9 is_stmt 1
 237              	.LBB108:
 238              	.LBB109:
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
GAS LISTING /tmp/ccAx1cNV.s 			page 11


 239              		.loc 2 121 5
 122:src/../h/riscv.hpp ****     return sepc;
 240              		.loc 2 122 5
 122:src/../h/riscv.hpp ****     return sepc;
 241              		.loc 2 122 64 is_stmt 0
 242              	#APP
 243              	# 122 "src/../h/riscv.hpp" 1
 244              		csrr a5, sepc
 245              	# 0 "" 2
 246              	#NO_APP
 247 00e4 2338F4F8 		sd	a5,-112(s0)
 123:src/../h/riscv.hpp **** }
 248              		.loc 2 123 5 is_stmt 1
 123:src/../h/riscv.hpp **** }
 249              		.loc 2 123 12 is_stmt 0
 250 00e8 833904F9 		ld	s3,-112(s0)
 251              	.LBE109:
 252              	.LBE108:
  29:src/riscv.cpp ****         //sepc ukazuje na instrukciju ecall
 253              		.loc 1 29 34
 254 00ec 93894900 		addi	s3,s3,4
 255              	.LVL6:
  32:src/riscv.cpp ****             size_t size = (size_t) a1 * MEM_BLOCK_SIZE;
 256              		.loc 1 32 9 is_stmt 1
 257              	.LBB110:
 258 00f0 93071000 		li	a5,1
 259 00f4 638CF406 		beq	s1,a5,.L37
 260              	.LBE110:
 261              	.LBE105:
 262              	.LBE236:
  36:src/riscv.cpp ****             void *ptr = (void *) a1;
 263              		.loc 1 36 16
 264              	.LBB237:
 265              	.LBB220:
 266              	.LBB204:
 267              	.LBB111:
 268 00f8 93072000 		li	a5,2
 269 00fc 638CF40A 		beq	s1,a5,.L38
 270              	.LBE111:
 271              	.LBE204:
 272              	.LBE220:
 273              	.LBE237:
  40:src/riscv.cpp ****             thread_t *handle = (thread_t *) a1;
 274              		.loc 1 40 16
 275              	.LBB238:
 276              	.LBB221:
 277              	.LBB205:
 278              	.LBB192:
 279              	.LBB112:
 280 0100 93071001 		li	a5,17
 281 0104 6382F40C 		beq	s1,a5,.L39
 282              	.LBE112:
 283              	.LBE192:
 284              	.LBE205:
 285              	.LBE221:
 286              	.LBE238:
  48:src/riscv.cpp ****             int res = PCB::thread_exit();
GAS LISTING /tmp/ccAx1cNV.s 			page 12


 287              		.loc 1 48 16
 288              	.LBB239:
 289              	.LBB222:
 290              	.LBB206:
 291              	.LBB193:
 292              	.LBB181:
 293              	.LBB113:
 294 0108 93072001 		li	a5,18
 295 010c 6382F40E 		beq	s1,a5,.L40
 296              	.LBE113:
 297              	.LBE181:
 298              	.LBE193:
 299              	.LBE206:
 300              	.LBE222:
 301              	.LBE239:
  51:src/riscv.cpp ****             PCB::dispatch();
 302              		.loc 1 51 16
 303              	.LBB240:
 304              	.LBB223:
 305              	.LBB207:
 306              	.LBB194:
 307              	.LBB182:
 308              	.LBB171:
 309              	.LBB114:
 310 0110 93073001 		li	a5,19
 311 0114 6386F40E 		beq	s1,a5,.L41
 312              	.LBE114:
 313              	.LBE171:
 314              	.LBE182:
 315              	.LBE194:
 316              	.LBE207:
 317              	.LBE223:
 318              	.LBE240:
  53:src/riscv.cpp ****             sem_t *handle = (sem_t *) a1;
 319              		.loc 1 53 16
 320              	.LBB241:
 321              	.LBB224:
 322              	.LBB208:
 323              	.LBB195:
 324              	.LBB183:
 325              	.LBB172:
 326              	.LBB162:
 327              	.LBB115:
 328 0118 93071002 		li	a5,33
 329 011c 6388F40E 		beq	s1,a5,.L42
 330              	.LBE115:
 331              	.LBE162:
 332              	.LBE172:
 333              	.LBE183:
 334              	.LBE195:
 335              	.LBE208:
 336              	.LBE224:
 337              	.LBE241:
  59:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
 338              		.loc 1 59 16
 339              	.LBB242:
 340              	.LBB225:
GAS LISTING /tmp/ccAx1cNV.s 			page 13


 341              	.LBB209:
 342              	.LBB196:
 343              	.LBB184:
 344              	.LBB173:
 345              	.LBB163:
 346              	.LBB155:
 347              	.LBB116:
 348 0120 93072002 		li	a5,34
 349 0124 638CF410 		beq	s1,a5,.L43
 350              	.LBE116:
 351              	.LBE155:
 352              	.LBE163:
 353              	.LBE173:
 354              	.LBE184:
 355              	.LBE196:
 356              	.LBE209:
 357              	.LBE225:
 358              	.LBE242:
  63:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
 359              		.loc 1 63 16
 360              	.LBB243:
 361              	.LBB226:
 362              	.LBB210:
 363              	.LBB197:
 364              	.LBB185:
 365              	.LBB174:
 366              	.LBB164:
 367              	.LBB156:
 368              	.LBB147:
 369              	.LBB117:
 370 0128 93073002 		li	a5,35
 371 012c 6382F412 		beq	s1,a5,.L44
 372              	.LBE117:
 373              	.LBE147:
 374              	.LBE156:
 375              	.LBE164:
 376              	.LBE174:
 377              	.LBE185:
 378              	.LBE197:
 379              	.LBE210:
 380              	.LBE226:
 381              	.LBE243:
  67:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
 382              		.loc 1 67 16
 383              	.LBB244:
 384              	.LBB227:
 385              	.LBB211:
 386              	.LBB198:
 387              	.LBB186:
 388              	.LBB175:
 389              	.LBB165:
 390              	.LBB157:
 391              	.LBB148:
 392              	.LBB141:
 393              	.LBB118:
 394 0130 93074002 		li	a5,36
 395 0134 6388F412 		beq	s1,a5,.L45
GAS LISTING /tmp/ccAx1cNV.s 			page 14


 396              	.LBE118:
 397              	.LBE141:
 398              	.LBE148:
 399              	.LBE157:
 400              	.LBE165:
 401              	.LBE175:
 402              	.LBE186:
 403              	.LBE198:
 404              	.LBE211:
 405              	.LBE227:
 406              	.LBE244:
  71:src/riscv.cpp ****             sem_t handle = (sem_t) a1;
 407              		.loc 1 71 16
 408              	.LBB245:
 409              	.LBB228:
 410              	.LBB212:
 411              	.LBB199:
 412              	.LBB187:
 413              	.LBB176:
 414              	.LBB166:
 415              	.LBB158:
 416              	.LBB149:
 417              	.LBB142:
 418              	.LBB136:
 419              	.LBB119:
 420 0138 93076002 		li	a5,38
 421 013c 638EF412 		beq	s1,a5,.L46
 422              	.LBE119:
 423              	.LBE136:
 424              	.LBE142:
 425              	.LBE149:
 426              	.LBE158:
 427              	.LBE166:
 428              	.LBE176:
 429              	.LBE187:
 430              	.LBE199:
 431              	.LBE212:
 432              	.LBE228:
 433              	.LBE245:
  75:src/riscv.cpp ****             char c = __getc();
 434              		.loc 1 75 16
 435              	.LBB246:
 436              	.LBB229:
 437              	.LBB213:
 438              	.LBB200:
 439              	.LBB188:
 440              	.LBB177:
 441              	.LBB167:
 442              	.LBB159:
 443              	.LBB150:
 444              	.LBB143:
 445              	.LBB137:
 446              	.LBB132:
 447              	.LBB120:
 448 0140 93071004 		li	a5,65
 449 0144 6384F414 		beq	s1,a5,.L47
 450              	.LBE120:
GAS LISTING /tmp/ccAx1cNV.s 			page 15


 451              	.LBE132:
 452              	.LBE137:
 453              	.LBE143:
 454              	.LBE150:
 455              	.LBE159:
 456              	.LBE167:
 457              	.LBE177:
 458              	.LBE188:
 459              	.LBE200:
 460              	.LBE213:
 461              	.LBE229:
 462              	.LBE246:
  78:src/riscv.cpp ****             char c = (char) a1;
 463              		.loc 1 78 16
 464              	.LBB247:
 465              	.LBB230:
 466              	.LBB214:
 467              	.LBB201:
 468              	.LBB189:
 469              	.LBB178:
 470              	.LBB168:
 471              	.LBB160:
 472              	.LBB151:
 473              	.LBB144:
 474              	.LBB138:
 475              	.LBB133:
 476              	.LBB129:
 477              	.LBB121:
 478 0148 93072004 		li	a5,66
 479 014c 6388F414 		beq	s1,a5,.L48
  81:src/riscv.cpp ****             mc_sstatus(Riscv::SSTATUS_SPP);
 480              		.loc 1 81 16
 481 0150 93073004 		li	a5,67
 482 0154 638EF414 		beq	s1,a5,.L49
  83:src/riscv.cpp ****             ms_sstatus(Riscv::SSTATUS_SPP);
 483              		.loc 1 83 16
 484 0158 93074004 		li	a5,68
 485 015c 6392F402 		bne	s1,a5,.L6
  84:src/riscv.cpp ****         }
 486              		.loc 1 84 13
 487              	.LVL7:
 488              	.LBB122:
 489              	.LBB123:
 169:src/../h/riscv.hpp **** }
 490              		.loc 2 169 5
 169:src/../h/riscv.hpp **** }
 491              		.loc 2 169 68 is_stmt 0
 492 0160 93070010 		li	a5,256
 493              	#APP
 494              	# 169 "src/../h/riscv.hpp" 1
 170:src/../h/riscv.hpp **** 
 495              		csrs sstatus, a5
 496              	# 0 "" 2
 497              		.loc 2 170 1
 498              	#NO_APP
 499 0168 6F008001 		j	.L6
 500              	.LVL8:
GAS LISTING /tmp/ccAx1cNV.s 			page 16


 501              	.L37:
 502              	.LBE123:
 503              	.LBE122:
 504              	.LBE121:
 505              	.LBE129:
 506              	.LBE133:
 507              	.LBE138:
 508              	.LBE144:
 509              	.LBE151:
 510              	.LBE160:
 511              	.LBE168:
 512              	.LBE178:
 513              	.LBE189:
 514              	.LBE201:
 515              	.LBB202:
  33:src/riscv.cpp ****             void *allocated = MemoryAllocator::mem_alloc(size);
 516              		.loc 1 33 13 is_stmt 1
  33:src/riscv.cpp ****             void *allocated = MemoryAllocator::mem_alloc(size);
 517              		.loc 1 33 27 is_stmt 0
 518 016c 033584FC 		ld	a0,-56(s0)
 519              	.LVL9:
  34:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(allocated));
 520              		.loc 1 34 13 is_stmt 1
  34:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(allocated));
 521              		.loc 1 34 57 is_stmt 0
 522 0170 13156500 		slli	a0,a0,6
 523              	.LVL10:
 524 0174 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 524      E7800000 
 525              	.LVL11:
  35:src/riscv.cpp ****         } else if (code == 0x02) {
 526              		.loc 1 35 13 is_stmt 1
  35:src/riscv.cpp ****         } else if (code == 0x02) {
 527              		.loc 1 35 61 is_stmt 0
 528              	#APP
 529              	# 35 "src/riscv.cpp" 1
 530              		mv a0, a0
 531              	# 0 "" 2
 532              	.LVL12:
 533              	#NO_APP
 534              	.L6:
 535              	.LBE202:
 536              	.LBE214:
  87:src/riscv.cpp ****             w_sstatus(sstatus);
 537              		.loc 1 87 9 is_stmt 1
  87:src/riscv.cpp ****             w_sstatus(sstatus);
 538              		.loc 1 87 26 is_stmt 0
 539 0180 9384D4FB 		addi	s1,s1,-67
 540              	.LVL13:
  87:src/riscv.cpp ****             w_sstatus(sstatus);
 541              		.loc 1 87 9
 542 0184 93071000 		li	a5,1
 543 0188 63F49700 		bleu	s1,a5,.L20
  88:src/riscv.cpp ****         }
 544              		.loc 1 88 13 is_stmt 1
 545              	.LVL14:
 546              	.LBB215:
GAS LISTING /tmp/ccAx1cNV.s 			page 17


 547              	.LBB216:
 180:src/../h/riscv.hpp **** }
 181:src/../h/riscv.hpp **** 
 182:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus) {
 183:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 548              		.loc 2 183 5
 549              		.loc 2 183 77 is_stmt 0
 550              	#APP
 551              	# 183 "src/../h/riscv.hpp" 1
 184              	}
 552              		csrw sstatus, s4
 553              	# 0 "" 2
 554              	.LVL15:
 555              	#NO_APP
 556              	.L20:
 557              	.LBE216:
 558              	.LBE215:
  90:src/riscv.cpp ****     } else if (scause == 0x0000000000000002UL) {
 559              		.loc 1 90 9 is_stmt 1
 560              	.LBB217:
 561              	.LBB218:
 127:src/../h/riscv.hpp **** }
 562              		.loc 2 127 5
 127:src/../h/riscv.hpp **** }
 563              		.loc 2 127 65 is_stmt 0
 564              	#APP
 565              	# 127 "src/../h/riscv.hpp" 1
 566              		csrw sepc, s3
 567              	# 0 "" 2
 568              	.LVL16:
 569              	#NO_APP
 570              	.L3:
 571              	.LBE218:
 572              	.LBE217:
 573              	.LBE230:
 574              	.LBE247:
 130:src/riscv.cpp ****     }
 131:src/riscv.cpp **** }
 575              		.loc 1 131 1
 576 0194 83308108 		ld	ra,136(sp)
 577              		.cfi_remember_state
 578              		.cfi_restore 1
 579 0198 03340108 		ld	s0,128(sp)
 580              		.cfi_restore 8
 581              		.cfi_def_cfa 2, 144
 582 019c 83348107 		ld	s1,120(sp)
 583              		.cfi_restore 9
 584 01a0 03390107 		ld	s2,112(sp)
 585              		.cfi_restore 18
 586 01a4 83398106 		ld	s3,104(sp)
 587              		.cfi_restore 19
 588 01a8 033A0106 		ld	s4,96(sp)
 589              		.cfi_restore 20
 590 01ac 13010109 		addi	sp,sp,144
 591              		.cfi_def_cfa_offset 0
 592 01b0 67800000 		jr	ra
 593              	.LVL17:
GAS LISTING /tmp/ccAx1cNV.s 			page 18


 594              	.L38:
 595              		.cfi_restore_state
 596              	.LBB248:
 597              	.LBB231:
 598              	.LBB219:
 599              	.LBB203:
 600              	.LBB190:
  37:src/riscv.cpp ****             int res = MemoryAllocator::mem_free(ptr);
 601              		.loc 1 37 13 is_stmt 1
  37:src/riscv.cpp ****             int res = MemoryAllocator::mem_free(ptr);
 602              		.loc 1 37 34 is_stmt 0
 603 01b4 033584FC 		ld	a0,-56(s0)
 604              	.LVL18:
  38:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 605              		.loc 1 38 13 is_stmt 1
  38:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 606              		.loc 1 38 48 is_stmt 0
 607 01b8 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 607      E7800000 
 608              	.LVL19:
  39:src/riscv.cpp ****         } else if (code == 0x11) {
 609              		.loc 1 39 13 is_stmt 1
  39:src/riscv.cpp ****         } else if (code == 0x11) {
 610              		.loc 1 39 55 is_stmt 0
 611              	#APP
 612              	# 39 "src/riscv.cpp" 1
 613              		mv a0, a0
 614              	# 0 "" 2
 615              	#NO_APP
 616              	.LBE190:
 617 01c4 6FF0DFFB 		j	.L6
 618              	.LVL20:
 619              	.L39:
 620              	.LBB191:
 621              	.LBB179:
  41:src/riscv.cpp ****             PCB::Body body = (PCB::Body) a2;
 622              		.loc 1 41 13 is_stmt 1
  41:src/riscv.cpp ****             PCB::Body body = (PCB::Body) a2;
 623              		.loc 1 41 45 is_stmt 0
 624 01c8 033984FC 		ld	s2,-56(s0)
 625              	.LVL21:
  42:src/riscv.cpp ****             void *arg = (void *) a3;
 626              		.loc 1 42 13 is_stmt 1
  42:src/riscv.cpp ****             void *arg = (void *) a3;
 627              		.loc 1 42 42 is_stmt 0
 628 01cc 033504FC 		ld	a0,-64(s0)
 629              	.LVL22:
  43:src/riscv.cpp ****             uint64 *stack_space = (uint64 *) a4;
 630              		.loc 1 43 13 is_stmt 1
  43:src/riscv.cpp ****             uint64 *stack_space = (uint64 *) a4;
 631              		.loc 1 43 34 is_stmt 0
 632 01d0 833584FB 		ld	a1,-72(s0)
 633              	.LVL23:
  44:src/riscv.cpp ****             *handle = PCB::create_thread(body, arg, stack_space);
 634              		.loc 1 44 13 is_stmt 1
  44:src/riscv.cpp ****             *handle = PCB::create_thread(body, arg, stack_space);
 635              		.loc 1 44 46 is_stmt 0
GAS LISTING /tmp/ccAx1cNV.s 			page 19


 636 01d4 033604FB 		ld	a2,-80(s0)
 637              	.LVL24:
  45:src/riscv.cpp ****             int res = 1;
 638              		.loc 1 45 13 is_stmt 1
  45:src/riscv.cpp ****             int res = 1;
 639              		.loc 1 45 41 is_stmt 0
 640 01d8 97000000 		call	_ZN3PCB13create_threadEPFvPvES0_Pm@plt
 640      E7800000 
 641              	.LVL25:
  45:src/riscv.cpp ****             int res = 1;
 642              		.loc 1 45 21
 643 01e0 2330A900 		sd	a0,0(s2)
  46:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 644              		.loc 1 46 13 is_stmt 1
 645              	.LVL26:
  47:src/riscv.cpp ****         } else if (code == 0x12) {
 646              		.loc 1 47 13
  47:src/riscv.cpp ****         } else if (code == 0x12) {
 647              		.loc 1 47 55 is_stmt 0
 648 01e4 93071000 		li	a5,1
 649              	#APP
 650              	# 47 "src/riscv.cpp" 1
 651              		mv a0, a5
 652              	# 0 "" 2
 653              	#NO_APP
 654              	.LBE179:
 655 01ec 6FF05FF9 		j	.L6
 656              	.LVL27:
 657              	.L40:
 658              	.LBB180:
 659              	.LBB169:
  49:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 660              		.loc 1 49 13 is_stmt 1
  49:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 661              		.loc 1 49 39 is_stmt 0
 662 01f0 97000000 		call	_ZN3PCB11thread_exitEv@plt
 662      E7800000 
 663              	.LVL28:
  50:src/riscv.cpp ****         } else if (code == 0x13) {
 664              		.loc 1 50 13 is_stmt 1
  50:src/riscv.cpp ****         } else if (code == 0x13) {
 665              		.loc 1 50 55 is_stmt 0
 666              	#APP
 667              	# 50 "src/riscv.cpp" 1
 668              		mv a0, a0
 669              	# 0 "" 2
 670              	#NO_APP
 671              	.LBE169:
 672 01fc 6FF05FF8 		j	.L6
 673              	.LVL29:
 674              	.L41:
 675              	.LBB170:
  52:src/riscv.cpp ****         } else if (code == 0x21) {
 676              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp ****         } else if (code == 0x21) {
 677              		.loc 1 52 26 is_stmt 0
 678 0200 97000000 		call	_ZN3PCB8dispatchEv@plt
GAS LISTING /tmp/ccAx1cNV.s 			page 20


 678      E7800000 
 679              	.LVL30:
 680 0208 6FF09FF7 		j	.L6
 681              	.L42:
 682              	.LBB161:
 683              	.LBB152:
  54:src/riscv.cpp ****             unsigned int init = (unsigned int) a2;
 684              		.loc 1 54 13 is_stmt 1
  54:src/riscv.cpp ****             unsigned int init = (unsigned int) a2;
 685              		.loc 1 54 39 is_stmt 0
 686 020c 033984FC 		ld	s2,-56(s0)
 687              	.LVL31:
  55:src/riscv.cpp ****             *handle = _sem::open(init);
 688              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             *handle = _sem::open(init);
 689              		.loc 1 55 48 is_stmt 0
 690 0210 033504FC 		ld	a0,-64(s0)
 691              	.LVL32:
  56:src/riscv.cpp ****             int res = handle != nullptr ? 0 : -1;
 692              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             int res = handle != nullptr ? 0 : -1;
 693              		.loc 1 56 33 is_stmt 0
 694 0214 1B050500 		sext.w	a0,a0
 695 0218 97000000 		call	_ZN4_sem4openEj@plt
 695      E7800000 
 696              	.LVL33:
  56:src/riscv.cpp ****             int res = handle != nullptr ? 0 : -1;
 697              		.loc 1 56 21
 698 0220 2330A900 		sd	a0,0(s2)
  57:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 699              		.loc 1 57 13 is_stmt 1
  57:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 700              		.loc 1 57 41 is_stmt 0
 701 0224 63080900 		beqz	s2,.L30
 702 0228 93070000 		li	a5,0
 703              	.L12:
 704              	.LVL34:
  58:src/riscv.cpp ****         } else if (code == 0x22) {
 705              		.loc 1 58 13 is_stmt 1 discriminator 4
  58:src/riscv.cpp ****         } else if (code == 0x22) {
 706              		.loc 1 58 55 is_stmt 0 discriminator 4
 707              	#APP
 708              	# 58 "src/riscv.cpp" 1
 709              		mv a0, a5
 710              	# 0 "" 2
 711              	#NO_APP
 712              	.LBE152:
 713 0230 6FF01FF5 		j	.L6
 714              	.LVL35:
 715              	.L30:
 716              	.LBB153:
  57:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 717              		.loc 1 57 41
 718 0234 9307F0FF 		li	a5,-1
 719 0238 6FF05FFF 		j	.L12
 720              	.LVL36:
 721              	.L43:
GAS LISTING /tmp/ccAx1cNV.s 			page 21


 722              	.LBE153:
 723              	.LBB154:
 724              	.LBB145:
  60:src/riscv.cpp ****             int res = _sem::close(handle);
 725              		.loc 1 60 13 is_stmt 1
  60:src/riscv.cpp ****             int res = _sem::close(handle);
 726              		.loc 1 60 36 is_stmt 0
 727 023c 033584FC 		ld	a0,-56(s0)
 728              	.LVL37:
  61:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 729              		.loc 1 61 13 is_stmt 1
  61:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 730              		.loc 1 61 34 is_stmt 0
 731 0240 97000000 		call	_ZN4_sem5closeEPS_@plt
 731      E7800000 
 732              	.LVL38:
  62:src/riscv.cpp ****         } else if (code == 0x23) {
 733              		.loc 1 62 13 is_stmt 1
  62:src/riscv.cpp ****         } else if (code == 0x23) {
 734              		.loc 1 62 55 is_stmt 0
 735              	#APP
 736              	# 62 "src/riscv.cpp" 1
 737              		mv a0, a0
 738              	# 0 "" 2
 739              	#NO_APP
 740              	.LBE145:
 741 024c 6FF05FF3 		j	.L6
 742              	.LVL39:
 743              	.L44:
 744              	.LBB146:
 745              	.LBB139:
  64:src/riscv.cpp ****             int res = _sem::wait(handle);
 746              		.loc 1 64 13 is_stmt 1
  64:src/riscv.cpp ****             int res = _sem::wait(handle);
 747              		.loc 1 64 36 is_stmt 0
 748 0250 033584FC 		ld	a0,-56(s0)
 749              	.LVL40:
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 750              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 751              		.loc 1 65 33 is_stmt 0
 752 0254 97000000 		call	_ZN4_sem4waitEPS_@plt
 752      E7800000 
 753              	.LVL41:
  66:src/riscv.cpp ****         } else if (code == 0x24) {
 754              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****         } else if (code == 0x24) {
 755              		.loc 1 66 55 is_stmt 0
 756              	#APP
 757              	# 66 "src/riscv.cpp" 1
 758              		mv a0, a0
 759              	# 0 "" 2
 760              	#NO_APP
 761              	.LBE139:
 762 0260 6FF01FF2 		j	.L6
 763              	.LVL42:
 764              	.L45:
GAS LISTING /tmp/ccAx1cNV.s 			page 22


 765              	.LBB140:
 766              	.LBB134:
  68:src/riscv.cpp ****             int res = _sem::signal(handle);
 767              		.loc 1 68 13 is_stmt 1
  68:src/riscv.cpp ****             int res = _sem::signal(handle);
 768              		.loc 1 68 36 is_stmt 0
 769 0264 033584FC 		ld	a0,-56(s0)
 770              	.LVL43:
  69:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 771              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 772              		.loc 1 69 35 is_stmt 0
 773 0268 97000000 		call	_ZN4_sem6signalEPS_@plt
 773      E7800000 
 774              	.LVL44:
  70:src/riscv.cpp ****         } else if (code == 0x26) {
 775              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****         } else if (code == 0x26) {
 776              		.loc 1 70 55 is_stmt 0
 777              	#APP
 778              	# 70 "src/riscv.cpp" 1
 779              		mv a0, a0
 780              	# 0 "" 2
 781              	#NO_APP
 782              	.LBE134:
 783 0274 6FF0DFF0 		j	.L6
 784              	.LVL45:
 785              	.L46:
 786              	.LBB135:
 787              	.LBB130:
  72:src/riscv.cpp ****             int res = _sem::trywait(handle);
 788              		.loc 1 72 13 is_stmt 1
  72:src/riscv.cpp ****             int res = _sem::trywait(handle);
 789              		.loc 1 72 36 is_stmt 0
 790 0278 033584FC 		ld	a0,-56(s0)
 791              	.LVL46:
  73:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 792              		.loc 1 73 13 is_stmt 1
  73:src/riscv.cpp ****             __asm__ volatile("mv a0, %0" : : "r"(res));
 793              		.loc 1 73 36 is_stmt 0
 794 027c 97000000 		call	_ZN4_sem7trywaitEPS_@plt
 794      E7800000 
 795              	.LVL47:
  74:src/riscv.cpp ****         } else if (code == 0x41) {
 796              		.loc 1 74 13 is_stmt 1
  74:src/riscv.cpp ****         } else if (code == 0x41) {
 797              		.loc 1 74 55 is_stmt 0
 798              	#APP
 799              	# 74 "src/riscv.cpp" 1
 800              		mv a0, a0
 801              	# 0 "" 2
 802              	#NO_APP
 803              	.LBE130:
 804 0288 6FF09FEF 		j	.L6
 805              	.LVL48:
 806              	.L47:
 807              	.LBB131:
GAS LISTING /tmp/ccAx1cNV.s 			page 23


 808              	.LBB127:
  76:src/riscv.cpp ****             __asm__ volatile ("mv a0,%0": : "r"(c));
 809              		.loc 1 76 13 is_stmt 1
  76:src/riscv.cpp ****             __asm__ volatile ("mv a0,%0": : "r"(c));
 810              		.loc 1 76 28 is_stmt 0
 811 028c 97000000 		call	__getc@plt
 811      E7800000 
 812              	.LVL49:
  77:src/riscv.cpp ****         } else if (code == 0x42) {
 813              		.loc 1 77 13 is_stmt 1
  77:src/riscv.cpp ****         } else if (code == 0x42) {
 814              		.loc 1 77 52 is_stmt 0
 815              	#APP
 816              	# 77 "src/riscv.cpp" 1
 817              		mv a0,a0
 818              	# 0 "" 2
 819              	#NO_APP
 820              	.LBE127:
 821 0298 6FF09FEE 		j	.L6
 822              	.LVL50:
 823              	.L48:
 824              	.LBB128:
 825              	.LBB124:
  79:src/riscv.cpp ****             __putc(c);
 826              		.loc 1 79 13 is_stmt 1
  79:src/riscv.cpp ****             __putc(c);
 827              		.loc 1 79 29 is_stmt 0
 828 029c 033584FC 		ld	a0,-56(s0)
 829              	.LVL51:
  80:src/riscv.cpp ****         } else if (code == 0x43) {
 830              		.loc 1 80 13 is_stmt 1
  80:src/riscv.cpp ****         } else if (code == 0x43) {
 831              		.loc 1 80 19 is_stmt 0
 832 02a0 1375F50F 		andi	a0,a0,0xff
 833 02a4 97000000 		call	__putc@plt
 833      E7800000 
 834              	.LVL52:
 835              	.LBE124:
 836 02ac 6FF05FED 		j	.L6
 837              	.L49:
  82:src/riscv.cpp ****         } else if (code == 0x44) {
 838              		.loc 1 82 13 is_stmt 1
 839              	.LVL53:
 840              	.LBB125:
 841              	.LBB126:
 173:src/../h/riscv.hpp **** }
 842              		.loc 2 173 5
 173:src/../h/riscv.hpp **** }
 843              		.loc 2 173 68 is_stmt 0
 844 02b0 93070010 		li	a5,256
 845              	#APP
 846              	# 173 "src/../h/riscv.hpp" 1
 174:src/../h/riscv.hpp **** 
 847              		csrc sstatus, a5
 848              	# 0 "" 2
 849              		.loc 2 174 1
 850              	#NO_APP
GAS LISTING /tmp/ccAx1cNV.s 			page 24


 851 02b8 6FF09FEC 		j	.L6
 852              	.LVL54:
 853              	.L33:
 854              	.LBE126:
 855              	.LBE125:
 856              	.LBE128:
 857              	.LBE131:
 858              	.LBE135:
 859              	.LBE140:
 860              	.LBE146:
 861              	.LBE154:
 862              	.LBE161:
 863              	.LBE170:
 864              	.LBE180:
 865              	.LBE191:
 866              	.LBE203:
 867              	.LBE219:
 868              	.LBE231:
 869              	.LBB232:
  92:src/riscv.cpp ****         __putc(scause + '0');
 870              		.loc 1 92 9 is_stmt 1
  92:src/riscv.cpp ****         __putc(scause + '0');
 871              		.loc 1 92 20 is_stmt 0
 872 02bc 17050000 		lla	a0,.LC0
 872      13050500 
 873 02c4 97000000 		call	_Z11printStringPKc@plt
 873      E7800000 
 874              	.LVL55:
  93:src/riscv.cpp ****         __putc('\n');
 875              		.loc 1 93 9 is_stmt 1
  93:src/riscv.cpp ****         __putc('\n');
 876              		.loc 1 93 15 is_stmt 0
 877 02cc 1B050903 		addiw	a0,s2,48
 878 02d0 1375F50F 		andi	a0,a0,0xff
 879 02d4 97000000 		call	__putc@plt
 879      E7800000 
 880              	.LVL56:
  94:src/riscv.cpp ****         printString("ILEGALNA INSTRUKCIJA");
 881              		.loc 1 94 9 is_stmt 1
  94:src/riscv.cpp ****         printString("ILEGALNA INSTRUKCIJA");
 882              		.loc 1 94 15 is_stmt 0
 883 02dc 1305A000 		li	a0,10
 884 02e0 97000000 		call	__putc@plt
 884      E7800000 
 885              	.LVL57:
  95:src/riscv.cpp ****         printString("\n");
 886              		.loc 1 95 9 is_stmt 1
  95:src/riscv.cpp ****         printString("\n");
 887              		.loc 1 95 20 is_stmt 0
 888 02e8 17050000 		lla	a0,.LC1
 888      13050500 
 889 02f0 97000000 		call	_Z11printStringPKc@plt
 889      E7800000 
 890              	.LVL58:
  96:src/riscv.cpp ****         while (1);
 891              		.loc 1 96 9 is_stmt 1
  96:src/riscv.cpp ****         while (1);
GAS LISTING /tmp/ccAx1cNV.s 			page 25


 892              		.loc 1 96 20 is_stmt 0
 893 02f8 17050000 		lla	a0,.LC2
 893      13050500 
 894 0300 97000000 		call	_Z11printStringPKc@plt
 894      E7800000 
 895              	.LVL59:
 896              	.L23:
  97:src/riscv.cpp ****         PCB::dispatch();
 897              		.loc 1 97 9 is_stmt 1 discriminator 1
  97:src/riscv.cpp ****         PCB::dispatch();
 898              		.loc 1 97 9 discriminator 1
 899 0308 6F000000 		j	.L23
 900              	.L34:
 901              	.LBB101:
 100:src/riscv.cpp ****         printString(" ");
 902              		.loc 1 100 9
 100:src/riscv.cpp ****         printString(" ");
 903              		.loc 1 100 20 is_stmt 0
 904 030c 17050000 		lla	a0,.LC3
 904      13050500 
 905 0314 97000000 		call	_Z11printStringPKc@plt
 905      E7800000 
 906              	.LVL60:
 101:src/riscv.cpp ****         printInt(Riscv::r_sepc());
 907              		.loc 1 101 9 is_stmt 1
 101:src/riscv.cpp ****         printInt(Riscv::r_sepc());
 908              		.loc 1 101 20 is_stmt 0
 909 031c 17050000 		lla	a0,.LC4
 909      13050500 
 910 0324 97000000 		call	_Z11printStringPKc@plt
 910      E7800000 
 911              	.LVL61:
 102:src/riscv.cpp ****         printString("  ");
 912              		.loc 1 102 9 is_stmt 1
 913              	.LBB92:
 914              	.LBB93:
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 915              		.loc 2 121 5
 122:src/../h/riscv.hpp ****     return sepc;
 916              		.loc 2 122 5
 122:src/../h/riscv.hpp ****     return sepc;
 917              		.loc 2 122 64 is_stmt 0
 918              	#APP
 919              	# 122 "src/../h/riscv.hpp" 1
 920              		csrr a5, sepc
 921              	# 0 "" 2
 922              	#NO_APP
 923 0330 2334F4FA 		sd	a5,-88(s0)
 123:src/../h/riscv.hpp **** }
 924              		.loc 2 123 5 is_stmt 1
 123:src/../h/riscv.hpp **** }
 925              		.loc 2 123 12 is_stmt 0
 926 0334 033584FA 		ld	a0,-88(s0)
 927              	.LBE93:
 928              	.LBE92:
 102:src/riscv.cpp ****         printString("  ");
 929              		.loc 1 102 17
GAS LISTING /tmp/ccAx1cNV.s 			page 26


 930 0338 13060000 		li	a2,0
 931 033c 9305A000 		li	a1,10
 932 0340 1B050500 		sext.w	a0,a0
 933 0344 97000000 		call	_Z8printIntiii@plt
 933      E7800000 
 934              	.LVL62:
 103:src/riscv.cpp ****         printInt(Riscv::r_scause());
 935              		.loc 1 103 9 is_stmt 1
 103:src/riscv.cpp ****         printInt(Riscv::r_scause());
 936              		.loc 1 103 20 is_stmt 0
 937 034c 17050000 		lla	a0,.LC5
 937      13050500 
 938 0354 97000000 		call	_Z11printStringPKc@plt
 938      E7800000 
 939              	.LVL63:
 104:src/riscv.cpp ****         printString(" ");
 940              		.loc 1 104 9 is_stmt 1
 941              	.LBB94:
 942              	.LBB95:
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 943              		.loc 2 101 5
 102:src/../h/riscv.hpp ****     return scause;
 944              		.loc 2 102 5
 102:src/../h/riscv.hpp ****     return scause;
 945              		.loc 2 102 72 is_stmt 0
 946              	#APP
 947              	# 102 "src/../h/riscv.hpp" 1
 948              		csrr a5, scause
 949              	# 0 "" 2
 950              	#NO_APP
 951 0360 2330F4FA 		sd	a5,-96(s0)
 103:src/../h/riscv.hpp **** }
 952              		.loc 2 103 5 is_stmt 1
 103:src/../h/riscv.hpp **** }
 953              		.loc 2 103 12 is_stmt 0
 954 0364 033504FA 		ld	a0,-96(s0)
 955              	.LBE95:
 956              	.LBE94:
 104:src/riscv.cpp ****         printString(" ");
 957              		.loc 1 104 17
 958 0368 13060000 		li	a2,0
 959 036c 9305A000 		li	a1,10
 960 0370 1B050500 		sext.w	a0,a0
 961 0374 97000000 		call	_Z8printIntiii@plt
 961      E7800000 
 962              	.LVL64:
 105:src/riscv.cpp ****         printInt(Riscv::r_stval());
 963              		.loc 1 105 9 is_stmt 1
 105:src/riscv.cpp ****         printInt(Riscv::r_stval());
 964              		.loc 1 105 20 is_stmt 0
 965 037c 17050000 		lla	a0,.LC4
 965      13050500 
 966 0384 97000000 		call	_Z11printStringPKc@plt
 966      E7800000 
 967              	.LVL65:
 106:src/riscv.cpp ****         printString("\n");
 968              		.loc 1 106 9 is_stmt 1
GAS LISTING /tmp/ccAx1cNV.s 			page 27


 969              	.LBB96:
 970              	.LBB97:
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 971              		.loc 2 141 5
 142:src/../h/riscv.hpp ****     return stval;
 972              		.loc 2 142 5
 142:src/../h/riscv.hpp ****     return stval;
 973              		.loc 2 142 68 is_stmt 0
 974              	#APP
 975              	# 142 "src/../h/riscv.hpp" 1
 976              		csrr a5, stval
 977              	# 0 "" 2
 978              	#NO_APP
 979 0390 233CF4F8 		sd	a5,-104(s0)
 143:src/../h/riscv.hpp **** }
 980              		.loc 2 143 5 is_stmt 1
 143:src/../h/riscv.hpp **** }
 981              		.loc 2 143 12 is_stmt 0
 982 0394 033584F9 		ld	a0,-104(s0)
 983              	.LBE97:
 984              	.LBE96:
 106:src/riscv.cpp ****         printString("\n");
 985              		.loc 1 106 17
 986 0398 13060000 		li	a2,0
 987 039c 9305A000 		li	a1,10
 988 03a0 1B050500 		sext.w	a0,a0
 989 03a4 97000000 		call	_Z8printIntiii@plt
 989      E7800000 
 990              	.LVL66:
 107:src/riscv.cpp ****         while (1);
 991              		.loc 1 107 9 is_stmt 1
 107:src/riscv.cpp ****         while (1);
 992              		.loc 1 107 20 is_stmt 0
 993 03ac 17050000 		lla	a0,.LC2
 993      13050500 
 994 03b4 97000000 		call	_Z11printStringPKc@plt
 994      E7800000 
 995              	.LVL67:
 996              	.L25:
 108:src/riscv.cpp ****     } else if (scause == 0x0000000000000007UL) {
 997              		.loc 1 108 9 is_stmt 1 discriminator 2
 108:src/riscv.cpp ****     } else if (scause == 0x0000000000000007UL) {
 998              		.loc 1 108 9 discriminator 2
 999 03bc 6F000000 		j	.L25
 1000              	.L35:
 1001              	.LBB98:
 110:src/riscv.cpp ****         printString(" ");
 1002              		.loc 1 110 9
 110:src/riscv.cpp ****         printString(" ");
 1003              		.loc 1 110 20 is_stmt 0
 1004 03c0 17050000 		lla	a0,.LC6
 1004      13050500 
 1005 03c8 97000000 		call	_Z11printStringPKc@plt
 1005      E7800000 
 1006              	.LVL68:
 111:src/riscv.cpp ****         printInt(Riscv::r_sepc());
 1007              		.loc 1 111 9 is_stmt 1
GAS LISTING /tmp/ccAx1cNV.s 			page 28


 111:src/riscv.cpp ****         printInt(Riscv::r_sepc());
 1008              		.loc 1 111 20 is_stmt 0
 1009 03d0 17050000 		lla	a0,.LC4
 1009      13050500 
 1010 03d8 97000000 		call	_Z11printStringPKc@plt
 1010      E7800000 
 1011              	.LVL69:
 112:src/riscv.cpp ****         printString(" ");
 1012              		.loc 1 112 9 is_stmt 1
 1013              	.LBB84:
 1014              	.LBB85:
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1015              		.loc 2 121 5
 122:src/../h/riscv.hpp ****     return sepc;
 1016              		.loc 2 122 5
 122:src/../h/riscv.hpp ****     return sepc;
 1017              		.loc 2 122 64 is_stmt 0
 1018              	#APP
 1019              	# 122 "src/../h/riscv.hpp" 1
 1020              		csrr a5, sepc
 1021              	# 0 "" 2
 1022              	#NO_APP
 1023 03e4 2334F4FA 		sd	a5,-88(s0)
 123:src/../h/riscv.hpp **** }
 1024              		.loc 2 123 5 is_stmt 1
 123:src/../h/riscv.hpp **** }
 1025              		.loc 2 123 12 is_stmt 0
 1026 03e8 033584FA 		ld	a0,-88(s0)
 1027              	.LBE85:
 1028              	.LBE84:
 112:src/riscv.cpp ****         printString(" ");
 1029              		.loc 1 112 17
 1030 03ec 13060000 		li	a2,0
 1031 03f0 9305A000 		li	a1,10
 1032 03f4 1B050500 		sext.w	a0,a0
 1033 03f8 97000000 		call	_Z8printIntiii@plt
 1033      E7800000 
 1034              	.LVL70:
 113:src/riscv.cpp ****         printInt(Riscv::r_scause());
 1035              		.loc 1 113 9 is_stmt 1
 113:src/riscv.cpp ****         printInt(Riscv::r_scause());
 1036              		.loc 1 113 20 is_stmt 0
 1037 0400 17050000 		lla	a0,.LC4
 1037      13050500 
 1038 0408 97000000 		call	_Z11printStringPKc@plt
 1038      E7800000 
 1039              	.LVL71:
 114:src/riscv.cpp ****         printString(" ");
 1040              		.loc 1 114 9 is_stmt 1
 1041              	.LBB86:
 1042              	.LBB87:
 101:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 1043              		.loc 2 101 5
 102:src/../h/riscv.hpp ****     return scause;
 1044              		.loc 2 102 5
 102:src/../h/riscv.hpp ****     return scause;
 1045              		.loc 2 102 72 is_stmt 0
GAS LISTING /tmp/ccAx1cNV.s 			page 29


 1046              	#APP
 1047              	# 102 "src/../h/riscv.hpp" 1
 1048              		csrr a5, scause
 1049              	# 0 "" 2
 1050              	#NO_APP
 1051 0414 2330F4FA 		sd	a5,-96(s0)
 103:src/../h/riscv.hpp **** }
 1052              		.loc 2 103 5 is_stmt 1
 103:src/../h/riscv.hpp **** }
 1053              		.loc 2 103 12 is_stmt 0
 1054 0418 033504FA 		ld	a0,-96(s0)
 1055              	.LBE87:
 1056              	.LBE86:
 114:src/riscv.cpp ****         printString(" ");
 1057              		.loc 1 114 17
 1058 041c 13060000 		li	a2,0
 1059 0420 9305A000 		li	a1,10
 1060 0424 1B050500 		sext.w	a0,a0
 1061 0428 97000000 		call	_Z8printIntiii@plt
 1061      E7800000 
 1062              	.LVL72:
 115:src/riscv.cpp ****         printInt(Riscv::r_stval());
 1063              		.loc 1 115 9 is_stmt 1
 115:src/riscv.cpp ****         printInt(Riscv::r_stval());
 1064              		.loc 1 115 20 is_stmt 0
 1065 0430 17050000 		lla	a0,.LC4
 1065      13050500 
 1066 0438 97000000 		call	_Z11printStringPKc@plt
 1066      E7800000 
 1067              	.LVL73:
 116:src/riscv.cpp ****         printString("\n");
 1068              		.loc 1 116 9 is_stmt 1
 1069              	.LBB88:
 1070              	.LBB89:
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 1071              		.loc 2 141 5
 142:src/../h/riscv.hpp ****     return stval;
 1072              		.loc 2 142 5
 142:src/../h/riscv.hpp ****     return stval;
 1073              		.loc 2 142 68 is_stmt 0
 1074              	#APP
 1075              	# 142 "src/../h/riscv.hpp" 1
 1076              		csrr a5, stval
 1077              	# 0 "" 2
 1078              	#NO_APP
 1079 0444 233CF4F8 		sd	a5,-104(s0)
 143:src/../h/riscv.hpp **** }
 1080              		.loc 2 143 5 is_stmt 1
 143:src/../h/riscv.hpp **** }
 1081              		.loc 2 143 12 is_stmt 0
 1082 0448 033584F9 		ld	a0,-104(s0)
 1083              	.LBE89:
 1084              	.LBE88:
 116:src/riscv.cpp ****         printString("\n");
 1085              		.loc 1 116 17
 1086 044c 13060000 		li	a2,0
 1087 0450 9305A000 		li	a1,10
GAS LISTING /tmp/ccAx1cNV.s 			page 30


 1088 0454 1B050500 		sext.w	a0,a0
 1089 0458 97000000 		call	_Z8printIntiii@plt
 1089      E7800000 
 1090              	.LVL74:
 117:src/riscv.cpp ****         while (1);
 1091              		.loc 1 117 9 is_stmt 1
 117:src/riscv.cpp ****         while (1);
 1092              		.loc 1 117 20 is_stmt 0
 1093 0460 17050000 		lla	a0,.LC2
 1093      13050500 
 1094 0468 97000000 		call	_Z11printStringPKc@plt
 1094      E7800000 
 1095              	.LVL75:
 1096              	.L27:
 118:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL) {
 1097              		.loc 1 118 9 is_stmt 1 discriminator 3
 118:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL) {
 1098              		.loc 1 118 9 discriminator 3
 1099 0470 6F000000 		j	.L27
 1100              	.L36:
 1101              	.LBB90:
 1102              	.LBB75:
 120:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 1103              		.loc 1 120 9
 1104              	.LBB76:
 1105              	.LBB77:
 121:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1106              		.loc 2 121 5
 122:src/../h/riscv.hpp ****     return sepc;
 1107              		.loc 2 122 5
 122:src/../h/riscv.hpp ****     return sepc;
 1108              		.loc 2 122 64 is_stmt 0
 1109              	#APP
 1110              	# 122 "src/../h/riscv.hpp" 1
 1111              		csrr a5, sepc
 1112              	# 0 "" 2
 1113              	#NO_APP
 1114 0478 2334F4FA 		sd	a5,-88(s0)
 123:src/../h/riscv.hpp **** }
 1115              		.loc 2 123 5 is_stmt 1
 123:src/../h/riscv.hpp **** }
 1116              		.loc 2 123 12 is_stmt 0
 1117 047c 833784FA 		ld	a5,-88(s0)
 1118              	.LBE77:
 1119              	.LBE76:
 120:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 1120              		.loc 1 120 39
 1121 0480 233CF4F6 		sd	a5,-136(s0)
 121:src/riscv.cpp ****         console_handler();
 1122              		.loc 1 121 9 is_stmt 1
 1123              	.LBB78:
 1124              	.LBB79:
 177:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1125              		.loc 2 177 5
 178:src/../h/riscv.hpp ****     return sstatus;
 1126              		.loc 2 178 5
 178:src/../h/riscv.hpp ****     return sstatus;
GAS LISTING /tmp/ccAx1cNV.s 			page 31


 1127              		.loc 2 178 76 is_stmt 0
 1128              	#APP
 1129              	# 178 "src/../h/riscv.hpp" 1
 1130              		csrr a5, sstatus
 1131              	# 0 "" 2
 1132              	#NO_APP
 1133 0488 2330F4FA 		sd	a5,-96(s0)
 179:src/../h/riscv.hpp **** }
 1134              		.loc 2 179 5 is_stmt 1
 179:src/../h/riscv.hpp **** }
 1135              		.loc 2 179 12 is_stmt 0
 1136 048c 833704FA 		ld	a5,-96(s0)
 1137              	.LBE79:
 1138              	.LBE78:
 121:src/riscv.cpp ****         console_handler();
 1139              		.loc 1 121 45
 1140 0490 2330F4F8 		sd	a5,-128(s0)
 122:src/riscv.cpp ****         w_sstatus(sstatus);
 1141              		.loc 1 122 9 is_stmt 1
 122:src/riscv.cpp ****         w_sstatus(sstatus);
 1142              		.loc 1 122 24 is_stmt 0
 1143 0494 97000000 		call	console_handler@plt
 1143      E7800000 
 1144              	.LVL76:
 123:src/riscv.cpp ****         w_sepc(sepc);
 1145              		.loc 1 123 9 is_stmt 1
 123:src/riscv.cpp ****         w_sepc(sepc);
 1146              		.loc 1 123 18 is_stmt 0
 1147 049c 833704F8 		ld	a5,-128(s0)
 1148              	.LVL77:
 1149              	.LBB80:
 1150              	.LBB81:
 183:src/../h/riscv.hpp **** }
 1151              		.loc 2 183 5 is_stmt 1
 183:src/../h/riscv.hpp **** }
 1152              		.loc 2 183 77 is_stmt 0
 1153              	#APP
 1154              	# 183 "src/../h/riscv.hpp" 1
 1155              		csrw sstatus, a5
 1156              	# 0 "" 2
 1157              	.LVL78:
 1158              	#NO_APP
 1159              	.LBE81:
 1160              	.LBE80:
 124:src/riscv.cpp ****     } else {
 1161              		.loc 1 124 9 is_stmt 1
 124:src/riscv.cpp ****     } else {
 1162              		.loc 1 124 15 is_stmt 0
 1163 04a4 833784F7 		ld	a5,-136(s0)
 1164              	.LVL79:
 1165              	.LBB82:
 1166              	.LBB83:
 127:src/../h/riscv.hpp **** }
 1167              		.loc 2 127 5 is_stmt 1
 127:src/../h/riscv.hpp **** }
 1168              		.loc 2 127 65 is_stmt 0
 1169              	#APP
GAS LISTING /tmp/ccAx1cNV.s 			page 32


 1170              	# 127 "src/../h/riscv.hpp" 1
 128:src/../h/riscv.hpp **** 
 1171              		csrw sepc, a5
 1172              	# 0 "" 2
 1173              		.loc 2 128 1
 1174              	#NO_APP
 1175 04ac 6FF09FCE 		j	.L3
 1176              	.LBE83:
 1177              	.LBE82:
 1178              	.LBE75:
 1179              	.LBE90:
 1180              	.LBE98:
 1181              	.LBE101:
 1182              	.LBE232:
 1183              	.LBE248:
 1184              		.cfi_endproc
 1185              	.LFE50:
 1187              		.align	2
 1188              		.globl	_ZN5Riscv27handleSupervisorTrapConsoleEv
 1190              	_ZN5Riscv27handleSupervisorTrapConsoleEv:
 1191              	.LFB51:
 132:src/riscv.cpp **** 
 133:src/riscv.cpp **** void Riscv::handleSupervisorTrapConsole() {
 1192              		.loc 1 133 43 is_stmt 1
 1193              		.cfi_startproc
 1194              	.LVL80:
 1195 04b0 130101FF 		addi	sp,sp,-16
 1196              		.cfi_def_cfa_offset 16
 1197 04b4 23341100 		sd	ra,8(sp)
 1198 04b8 23308100 		sd	s0,0(sp)
 1199              		.cfi_offset 1, -8
 1200              		.cfi_offset 8, -16
 1201 04bc 13040101 		addi	s0,sp,16
 1202              		.cfi_def_cfa 8, 0
 134:src/riscv.cpp ****     console_handler();
 1203              		.loc 1 134 5
 1204              		.loc 1 134 20 is_stmt 0
 1205 04c0 97000000 		call	console_handler@plt
 1205      E7800000 
 1206              	.LVL81:
 135:src/riscv.cpp **** }
 1207              		.loc 1 135 1
 1208 04c8 83308100 		ld	ra,8(sp)
 1209              		.cfi_restore 1
 1210 04cc 03340100 		ld	s0,0(sp)
 1211              		.cfi_restore 8
 1212              		.cfi_def_cfa 2, 16
 1213 04d0 13010101 		addi	sp,sp,16
 1214              		.cfi_def_cfa_offset 0
 1215 04d4 67800000 		jr	ra
 1216              		.cfi_endproc
 1217              	.LFE51:
 1219              		.align	2
 1220              		.globl	_ZN5Riscv28handleSupervisorTimerHandlerEv
 1222              	_ZN5Riscv28handleSupervisorTimerHandlerEv:
 1223              	.LFB52:
 136:src/riscv.cpp **** 
GAS LISTING /tmp/ccAx1cNV.s 			page 33


 137:src/riscv.cpp **** void Riscv::handleSupervisorTimerHandler() { mc_sip(SIP_SSIE); }
 1224              		.loc 1 137 44 is_stmt 1
 1225              		.cfi_startproc
 1226              	.LVL82:
 1227 04d8 130101FF 		addi	sp,sp,-16
 1228              		.cfi_def_cfa_offset 16
 1229 04dc 23348100 		sd	s0,8(sp)
 1230              		.cfi_offset 8, -8
 1231 04e0 13040101 		addi	s0,sp,16
 1232              		.cfi_def_cfa 8, 0
 1233              		.loc 1 137 46
 1234              	.LVL83:
 1235              	.LBB249:
 1236              	.LBB250:
 155:src/../h/riscv.hpp **** }
 1237              		.loc 2 155 5
 155:src/../h/riscv.hpp **** }
 1238              		.loc 2 155 64 is_stmt 0
 1239 04e4 93072000 		li	a5,2
 1240              	#APP
 1241              	# 155 "src/../h/riscv.hpp" 1
 1242              		csrc sip, a5
 1243              	# 0 "" 2
 1244              	.LVL84:
 1245              	#NO_APP
 1246              	.LBE250:
 1247              	.LBE249:
 1248              		.loc 1 137 64
 1249 04ec 03348100 		ld	s0,8(sp)
 1250              		.cfi_restore 8
 1251              		.cfi_def_cfa 2, 16
 1252 04f0 13010101 		addi	sp,sp,16
 1253              		.cfi_def_cfa_offset 0
 1254 04f4 67800000 		jr	ra
 1255              		.cfi_endproc
 1256              	.LFE52:
 1258              	.Letext0:
 1259              		.file 3 "src/../h/../lib/hw.h"
 1260              		.file 4 "src/../h/MemoryAllocator.hpp"
 1261              		.file 5 "src/../h/../test/../h/syscall_c.hpp"
 1262              		.file 6 "src/../h/PCB.hpp"
 1263              		.file 7 "src/../h/_sem.hpp"
 1264              		.file 8 "src/../h/waitSemList.hpp"
 1265              		.file 9 "src/../h/../lib/console.h"
 1266              		.file 10 "src/../h/../test/printing.hpp"
GAS LISTING /tmp/ccAx1cNV.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccAx1cNV.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccAx1cNV.s:13     .text:0000000000000000 .L0 
     /tmp/ccAx1cNV.s:14     .text:0000000000000000 .L0 
     /tmp/ccAx1cNV.s:15     .text:0000000000000004 .L0 
     /tmp/ccAx1cNV.s:17     .text:0000000000000008 .L0 
     /tmp/ccAx1cNV.s:19     .text:000000000000000c .L0 
     /tmp/ccAx1cNV.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccAx1cNV.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccAx1cNV.s:33     .text:0000000000000014 .L0 
     /tmp/ccAx1cNV.s:34     .text:0000000000000018 .L0 
     /tmp/ccAx1cNV.s:35     .text:0000000000000018 .L0 
     /tmp/ccAx1cNV.s:37     .text:000000000000001c .L0 
     /tmp/ccAx1cNV.s:39     .text:0000000000000020 .L0 
     /tmp/ccAx1cNV.s:68     .text:0000000000000020 _ZN5Riscv21supervisorTrapHandlerEv
     /tmp/ccAx1cNV.s:71     .text:0000000000000020 .L0 
     /tmp/ccAx1cNV.s:72     .text:0000000000000020 .L0 
     /tmp/ccAx1cNV.s:73     .text:0000000000000024 .L0 
     /tmp/ccAx1cNV.s:80     .text:000000000000003c .L0 
     /tmp/ccAx1cNV.s:81     .text:000000000000003c .L0 
     /tmp/ccAx1cNV.s:82     .text:000000000000003c .L0 
     /tmp/ccAx1cNV.s:83     .text:000000000000003c .L0 
     /tmp/ccAx1cNV.s:84     .text:000000000000003c .L0 
     /tmp/ccAx1cNV.s:85     .text:000000000000003c .L0 
     /tmp/ccAx1cNV.s:87     .text:0000000000000040 .L0 
     /tmp/ccAx1cNV.s:89     .text:0000000000000040 .L0 
     /tmp/ccAx1cNV.s:90     .text:0000000000000040 .L0 
       src/riscv.cpp:19     .text:0000000000000040 .L0 
     /tmp/ccAx1cNV.s:101    .text:0000000000000048 .L0 
     /tmp/ccAx1cNV.s:102    .text:0000000000000048 .L0 
     /tmp/ccAx1cNV.s:103    .text:0000000000000048 .L0 
  src/../h/riscv.hpp:102    .text:0000000000000048 .L0 
     /tmp/ccAx1cNV.s:111    .text:0000000000000050 .L0 
     /tmp/ccAx1cNV.s:112    .text:0000000000000050 .L0 
     /tmp/ccAx1cNV.s:117    .text:0000000000000054 .L0 
     /tmp/ccAx1cNV.s:118    .text:0000000000000054 .L0 
       src/riscv.cpp:22     .text:0000000000000054 .L0 
     /tmp/ccAx1cNV.s:125    .text:0000000000000058 .L0 
       src/riscv.cpp:23     .text:0000000000000058 .L0 
     /tmp/ccAx1cNV.s:132    .text:0000000000000060 .L0 
       src/riscv.cpp:24     .text:0000000000000060 .L0 
     /tmp/ccAx1cNV.s:140    .text:0000000000000068 .L0 
       src/riscv.cpp:25     .text:0000000000000068 .L0 
     /tmp/ccAx1cNV.s:149    .text:0000000000000070 .L0 
     /tmp/ccAx1cNV.s:150    .text:0000000000000070 .L0 
     /tmp/ccAx1cNV.s:152    .text:0000000000000074 .L0 
     /tmp/ccAx1cNV.s:158    .text:000000000000007c .L0 
     /tmp/ccAx1cNV.s:166    .text:0000000000000084 .L0 
     /tmp/ccAx1cNV.s:176    .text:000000000000008c .L0 
     /tmp/ccAx1cNV.s:188    .text:0000000000000094 .L0 
     /tmp/ccAx1cNV.s:193    .text:00000000000000a4 .L0 
     /tmp/ccAx1cNV.s:194    .text:00000000000000a4 .L0 
     /tmp/ccAx1cNV.s:198    .text:00000000000000b4 .L0 
     /tmp/ccAx1cNV.s:199    .text:00000000000000b4 .L0 
GAS LISTING /tmp/ccAx1cNV.s 			page 35


     /tmp/ccAx1cNV.s:204    .text:00000000000000c4 .L0 
     /tmp/ccAx1cNV.s:205    .text:00000000000000c4 .L0 
     /tmp/ccAx1cNV.s:210    .text:00000000000000d0 .L0 
     /tmp/ccAx1cNV.s:211    .text:00000000000000d0 .L0 
     /tmp/ccAx1cNV.s:221    .text:00000000000000d4 .L0 
     /tmp/ccAx1cNV.s:222    .text:00000000000000d4 .L0 
     /tmp/ccAx1cNV.s:223    .text:00000000000000d4 .L0 
  src/../h/riscv.hpp:178    .text:00000000000000d4 .L0 
     /tmp/ccAx1cNV.s:231    .text:00000000000000dc .L0 
     /tmp/ccAx1cNV.s:232    .text:00000000000000dc .L0 
     /tmp/ccAx1cNV.s:239    .text:00000000000000e0 .L0 
     /tmp/ccAx1cNV.s:240    .text:00000000000000e0 .L0 
     /tmp/ccAx1cNV.s:241    .text:00000000000000e0 .L0 
  src/../h/riscv.hpp:122    .text:00000000000000e0 .L0 
     /tmp/ccAx1cNV.s:249    .text:00000000000000e8 .L0 
     /tmp/ccAx1cNV.s:250    .text:00000000000000e8 .L0 
     /tmp/ccAx1cNV.s:254    .text:00000000000000ec .L0 
     /tmp/ccAx1cNV.s:258    .text:00000000000000f0 .L0 
     /tmp/ccAx1cNV.s:268    .text:00000000000000f8 .L0 
     /tmp/ccAx1cNV.s:280    .text:0000000000000100 .L0 
     /tmp/ccAx1cNV.s:294    .text:0000000000000108 .L0 
     /tmp/ccAx1cNV.s:310    .text:0000000000000110 .L0 
     /tmp/ccAx1cNV.s:328    .text:0000000000000118 .L0 
     /tmp/ccAx1cNV.s:348    .text:0000000000000120 .L0 
     /tmp/ccAx1cNV.s:370    .text:0000000000000128 .L0 
     /tmp/ccAx1cNV.s:394    .text:0000000000000130 .L0 
     /tmp/ccAx1cNV.s:420    .text:0000000000000138 .L0 
     /tmp/ccAx1cNV.s:448    .text:0000000000000140 .L0 
     /tmp/ccAx1cNV.s:478    .text:0000000000000148 .L0 
     /tmp/ccAx1cNV.s:481    .text:0000000000000150 .L0 
     /tmp/ccAx1cNV.s:484    .text:0000000000000158 .L0 
     /tmp/ccAx1cNV.s:490    .text:0000000000000160 .L0 
     /tmp/ccAx1cNV.s:491    .text:0000000000000160 .L0 
     /tmp/ccAx1cNV.s:492    .text:0000000000000160 .L0 
     /tmp/ccAx1cNV.s:499    .text:0000000000000168 .L0 
     /tmp/ccAx1cNV.s:517    .text:000000000000016c .L0 
     /tmp/ccAx1cNV.s:518    .text:000000000000016c .L0 
     /tmp/ccAx1cNV.s:521    .text:0000000000000170 .L0 
     /tmp/ccAx1cNV.s:522    .text:0000000000000170 .L0 
     /tmp/ccAx1cNV.s:527    .text:000000000000017c .L0 
       src/riscv.cpp:35     .text:000000000000017c .L0 
     /tmp/ccAx1cNV.s:538    .text:0000000000000180 .L0 
     /tmp/ccAx1cNV.s:539    .text:0000000000000180 .L0 
     /tmp/ccAx1cNV.s:542    .text:0000000000000184 .L0 
     /tmp/ccAx1cNV.s:548    .text:000000000000018c .L0 
     /tmp/ccAx1cNV.s:549    .text:000000000000018c .L0 
  src/../h/riscv.hpp:183    .text:000000000000018c .L0 
     /tmp/ccAx1cNV.s:562    .text:0000000000000190 .L0 
     /tmp/ccAx1cNV.s:563    .text:0000000000000190 .L0 
  src/../h/riscv.hpp:127    .text:0000000000000190 .L0 
     /tmp/ccAx1cNV.s:576    .text:0000000000000194 .L0 
     /tmp/ccAx1cNV.s:577    .text:0000000000000198 .L0 
     /tmp/ccAx1cNV.s:578    .text:0000000000000198 .L0 
     /tmp/ccAx1cNV.s:580    .text:000000000000019c .L0 
     /tmp/ccAx1cNV.s:581    .text:000000000000019c .L0 
     /tmp/ccAx1cNV.s:583    .text:00000000000001a0 .L0 
     /tmp/ccAx1cNV.s:585    .text:00000000000001a4 .L0 
GAS LISTING /tmp/ccAx1cNV.s 			page 36


     /tmp/ccAx1cNV.s:587    .text:00000000000001a8 .L0 
     /tmp/ccAx1cNV.s:589    .text:00000000000001ac .L0 
     /tmp/ccAx1cNV.s:591    .text:00000000000001b0 .L0 
     /tmp/ccAx1cNV.s:595    .text:00000000000001b4 .L0 
     /tmp/ccAx1cNV.s:602    .text:00000000000001b4 .L0 
     /tmp/ccAx1cNV.s:603    .text:00000000000001b4 .L0 
     /tmp/ccAx1cNV.s:606    .text:00000000000001b8 .L0 
     /tmp/ccAx1cNV.s:607    .text:00000000000001b8 .L0 
     /tmp/ccAx1cNV.s:610    .text:00000000000001c0 .L0 
       src/riscv.cpp:39     .text:00000000000001c0 .L0 
     /tmp/ccAx1cNV.s:623    .text:00000000000001c8 .L0 
     /tmp/ccAx1cNV.s:624    .text:00000000000001c8 .L0 
     /tmp/ccAx1cNV.s:627    .text:00000000000001cc .L0 
     /tmp/ccAx1cNV.s:628    .text:00000000000001cc .L0 
     /tmp/ccAx1cNV.s:631    .text:00000000000001d0 .L0 
     /tmp/ccAx1cNV.s:632    .text:00000000000001d0 .L0 
     /tmp/ccAx1cNV.s:635    .text:00000000000001d4 .L0 
     /tmp/ccAx1cNV.s:636    .text:00000000000001d4 .L0 
     /tmp/ccAx1cNV.s:639    .text:00000000000001d8 .L0 
     /tmp/ccAx1cNV.s:640    .text:00000000000001d8 .L0 
     /tmp/ccAx1cNV.s:643    .text:00000000000001e0 .L0 
     /tmp/ccAx1cNV.s:646    .text:00000000000001e4 .L0 
     /tmp/ccAx1cNV.s:647    .text:00000000000001e4 .L0 
     /tmp/ccAx1cNV.s:648    .text:00000000000001e4 .L0 
     /tmp/ccAx1cNV.s:661    .text:00000000000001f0 .L0 
     /tmp/ccAx1cNV.s:662    .text:00000000000001f0 .L0 
     /tmp/ccAx1cNV.s:665    .text:00000000000001f8 .L0 
       src/riscv.cpp:50     .text:00000000000001f8 .L0 
     /tmp/ccAx1cNV.s:677    .text:0000000000000200 .L0 
     /tmp/ccAx1cNV.s:678    .text:0000000000000200 .L0 
     /tmp/ccAx1cNV.s:685    .text:000000000000020c .L0 
     /tmp/ccAx1cNV.s:686    .text:000000000000020c .L0 
     /tmp/ccAx1cNV.s:689    .text:0000000000000210 .L0 
     /tmp/ccAx1cNV.s:690    .text:0000000000000210 .L0 
     /tmp/ccAx1cNV.s:693    .text:0000000000000214 .L0 
     /tmp/ccAx1cNV.s:694    .text:0000000000000214 .L0 
     /tmp/ccAx1cNV.s:698    .text:0000000000000220 .L0 
     /tmp/ccAx1cNV.s:700    .text:0000000000000224 .L0 
     /tmp/ccAx1cNV.s:701    .text:0000000000000224 .L0 
     /tmp/ccAx1cNV.s:706    .text:000000000000022c .L0 
       src/riscv.cpp:58     .text:000000000000022c .L0 
     /tmp/ccAx1cNV.s:718    .text:0000000000000234 .L0 
     /tmp/ccAx1cNV.s:726    .text:000000000000023c .L0 
     /tmp/ccAx1cNV.s:727    .text:000000000000023c .L0 
     /tmp/ccAx1cNV.s:730    .text:0000000000000240 .L0 
     /tmp/ccAx1cNV.s:731    .text:0000000000000240 .L0 
     /tmp/ccAx1cNV.s:734    .text:0000000000000248 .L0 
       src/riscv.cpp:62     .text:0000000000000248 .L0 
     /tmp/ccAx1cNV.s:747    .text:0000000000000250 .L0 
     /tmp/ccAx1cNV.s:748    .text:0000000000000250 .L0 
     /tmp/ccAx1cNV.s:751    .text:0000000000000254 .L0 
     /tmp/ccAx1cNV.s:752    .text:0000000000000254 .L0 
     /tmp/ccAx1cNV.s:755    .text:000000000000025c .L0 
       src/riscv.cpp:66     .text:000000000000025c .L0 
     /tmp/ccAx1cNV.s:768    .text:0000000000000264 .L0 
     /tmp/ccAx1cNV.s:769    .text:0000000000000264 .L0 
     /tmp/ccAx1cNV.s:772    .text:0000000000000268 .L0 
GAS LISTING /tmp/ccAx1cNV.s 			page 37


     /tmp/ccAx1cNV.s:773    .text:0000000000000268 .L0 
     /tmp/ccAx1cNV.s:776    .text:0000000000000270 .L0 
       src/riscv.cpp:70     .text:0000000000000270 .L0 
     /tmp/ccAx1cNV.s:789    .text:0000000000000278 .L0 
     /tmp/ccAx1cNV.s:790    .text:0000000000000278 .L0 
     /tmp/ccAx1cNV.s:793    .text:000000000000027c .L0 
     /tmp/ccAx1cNV.s:794    .text:000000000000027c .L0 
     /tmp/ccAx1cNV.s:797    .text:0000000000000284 .L0 
       src/riscv.cpp:74     .text:0000000000000284 .L0 
     /tmp/ccAx1cNV.s:810    .text:000000000000028c .L0 
     /tmp/ccAx1cNV.s:811    .text:000000000000028c .L0 
     /tmp/ccAx1cNV.s:814    .text:0000000000000294 .L0 
       src/riscv.cpp:77     .text:0000000000000294 .L0 
     /tmp/ccAx1cNV.s:827    .text:000000000000029c .L0 
     /tmp/ccAx1cNV.s:828    .text:000000000000029c .L0 
     /tmp/ccAx1cNV.s:831    .text:00000000000002a0 .L0 
     /tmp/ccAx1cNV.s:832    .text:00000000000002a0 .L0 
     /tmp/ccAx1cNV.s:842    .text:00000000000002b0 .L0 
     /tmp/ccAx1cNV.s:843    .text:00000000000002b0 .L0 
     /tmp/ccAx1cNV.s:844    .text:00000000000002b0 .L0 
     /tmp/ccAx1cNV.s:851    .text:00000000000002b8 .L0 
     /tmp/ccAx1cNV.s:871    .text:00000000000002bc .L0 
     /tmp/ccAx1cNV.s:872    .text:00000000000002bc .L0 
     /tmp/ccAx1cNV.s:876    .text:00000000000002cc .L0 
     /tmp/ccAx1cNV.s:877    .text:00000000000002cc .L0 
     /tmp/ccAx1cNV.s:882    .text:00000000000002dc .L0 
     /tmp/ccAx1cNV.s:883    .text:00000000000002dc .L0 
     /tmp/ccAx1cNV.s:887    .text:00000000000002e8 .L0 
     /tmp/ccAx1cNV.s:888    .text:00000000000002e8 .L0 
     /tmp/ccAx1cNV.s:892    .text:00000000000002f8 .L0 
     /tmp/ccAx1cNV.s:893    .text:00000000000002f8 .L0 
     /tmp/ccAx1cNV.s:898    .text:0000000000000308 .L0 
     /tmp/ccAx1cNV.s:899    .text:0000000000000308 .L0 
     /tmp/ccAx1cNV.s:903    .text:000000000000030c .L0 
     /tmp/ccAx1cNV.s:904    .text:000000000000030c .L0 
     /tmp/ccAx1cNV.s:908    .text:000000000000031c .L0 
     /tmp/ccAx1cNV.s:909    .text:000000000000031c .L0 
     /tmp/ccAx1cNV.s:915    .text:000000000000032c .L0 
     /tmp/ccAx1cNV.s:916    .text:000000000000032c .L0 
     /tmp/ccAx1cNV.s:917    .text:000000000000032c .L0 
  src/../h/riscv.hpp:122    .text:000000000000032c .L0 
     /tmp/ccAx1cNV.s:925    .text:0000000000000334 .L0 
     /tmp/ccAx1cNV.s:926    .text:0000000000000334 .L0 
     /tmp/ccAx1cNV.s:930    .text:0000000000000338 .L0 
     /tmp/ccAx1cNV.s:936    .text:000000000000034c .L0 
     /tmp/ccAx1cNV.s:937    .text:000000000000034c .L0 
     /tmp/ccAx1cNV.s:943    .text:000000000000035c .L0 
     /tmp/ccAx1cNV.s:944    .text:000000000000035c .L0 
     /tmp/ccAx1cNV.s:945    .text:000000000000035c .L0 
  src/../h/riscv.hpp:102    .text:000000000000035c .L0 
     /tmp/ccAx1cNV.s:953    .text:0000000000000364 .L0 
     /tmp/ccAx1cNV.s:954    .text:0000000000000364 .L0 
     /tmp/ccAx1cNV.s:958    .text:0000000000000368 .L0 
     /tmp/ccAx1cNV.s:964    .text:000000000000037c .L0 
     /tmp/ccAx1cNV.s:965    .text:000000000000037c .L0 
     /tmp/ccAx1cNV.s:971    .text:000000000000038c .L0 
     /tmp/ccAx1cNV.s:972    .text:000000000000038c .L0 
GAS LISTING /tmp/ccAx1cNV.s 			page 38


     /tmp/ccAx1cNV.s:973    .text:000000000000038c .L0 
  src/../h/riscv.hpp:142    .text:000000000000038c .L0 
     /tmp/ccAx1cNV.s:981    .text:0000000000000394 .L0 
     /tmp/ccAx1cNV.s:982    .text:0000000000000394 .L0 
     /tmp/ccAx1cNV.s:986    .text:0000000000000398 .L0 
     /tmp/ccAx1cNV.s:992    .text:00000000000003ac .L0 
     /tmp/ccAx1cNV.s:993    .text:00000000000003ac .L0 
     /tmp/ccAx1cNV.s:998    .text:00000000000003bc .L0 
     /tmp/ccAx1cNV.s:999    .text:00000000000003bc .L0 
     /tmp/ccAx1cNV.s:1003   .text:00000000000003c0 .L0 
     /tmp/ccAx1cNV.s:1004   .text:00000000000003c0 .L0 
     /tmp/ccAx1cNV.s:1008   .text:00000000000003d0 .L0 
     /tmp/ccAx1cNV.s:1009   .text:00000000000003d0 .L0 
     /tmp/ccAx1cNV.s:1015   .text:00000000000003e0 .L0 
     /tmp/ccAx1cNV.s:1016   .text:00000000000003e0 .L0 
     /tmp/ccAx1cNV.s:1017   .text:00000000000003e0 .L0 
  src/../h/riscv.hpp:122    .text:00000000000003e0 .L0 
     /tmp/ccAx1cNV.s:1025   .text:00000000000003e8 .L0 
     /tmp/ccAx1cNV.s:1026   .text:00000000000003e8 .L0 
     /tmp/ccAx1cNV.s:1030   .text:00000000000003ec .L0 
     /tmp/ccAx1cNV.s:1036   .text:0000000000000400 .L0 
     /tmp/ccAx1cNV.s:1037   .text:0000000000000400 .L0 
     /tmp/ccAx1cNV.s:1043   .text:0000000000000410 .L0 
     /tmp/ccAx1cNV.s:1044   .text:0000000000000410 .L0 
     /tmp/ccAx1cNV.s:1045   .text:0000000000000410 .L0 
  src/../h/riscv.hpp:102    .text:0000000000000410 .L0 
     /tmp/ccAx1cNV.s:1053   .text:0000000000000418 .L0 
     /tmp/ccAx1cNV.s:1054   .text:0000000000000418 .L0 
     /tmp/ccAx1cNV.s:1058   .text:000000000000041c .L0 
     /tmp/ccAx1cNV.s:1064   .text:0000000000000430 .L0 
     /tmp/ccAx1cNV.s:1065   .text:0000000000000430 .L0 
     /tmp/ccAx1cNV.s:1071   .text:0000000000000440 .L0 
     /tmp/ccAx1cNV.s:1072   .text:0000000000000440 .L0 
     /tmp/ccAx1cNV.s:1073   .text:0000000000000440 .L0 
  src/../h/riscv.hpp:142    .text:0000000000000440 .L0 
     /tmp/ccAx1cNV.s:1081   .text:0000000000000448 .L0 
     /tmp/ccAx1cNV.s:1082   .text:0000000000000448 .L0 
     /tmp/ccAx1cNV.s:1086   .text:000000000000044c .L0 
     /tmp/ccAx1cNV.s:1092   .text:0000000000000460 .L0 
     /tmp/ccAx1cNV.s:1093   .text:0000000000000460 .L0 
     /tmp/ccAx1cNV.s:1098   .text:0000000000000470 .L0 
     /tmp/ccAx1cNV.s:1099   .text:0000000000000470 .L0 
     /tmp/ccAx1cNV.s:1106   .text:0000000000000474 .L0 
     /tmp/ccAx1cNV.s:1107   .text:0000000000000474 .L0 
     /tmp/ccAx1cNV.s:1108   .text:0000000000000474 .L0 
  src/../h/riscv.hpp:122    .text:0000000000000474 .L0 
     /tmp/ccAx1cNV.s:1116   .text:000000000000047c .L0 
     /tmp/ccAx1cNV.s:1117   .text:000000000000047c .L0 
     /tmp/ccAx1cNV.s:1121   .text:0000000000000480 .L0 
     /tmp/ccAx1cNV.s:1125   .text:0000000000000484 .L0 
     /tmp/ccAx1cNV.s:1126   .text:0000000000000484 .L0 
     /tmp/ccAx1cNV.s:1127   .text:0000000000000484 .L0 
  src/../h/riscv.hpp:178    .text:0000000000000484 .L0 
     /tmp/ccAx1cNV.s:1135   .text:000000000000048c .L0 
     /tmp/ccAx1cNV.s:1136   .text:000000000000048c .L0 
     /tmp/ccAx1cNV.s:1140   .text:0000000000000490 .L0 
     /tmp/ccAx1cNV.s:1142   .text:0000000000000494 .L0 
GAS LISTING /tmp/ccAx1cNV.s 			page 39


     /tmp/ccAx1cNV.s:1143   .text:0000000000000494 .L0 
     /tmp/ccAx1cNV.s:1146   .text:000000000000049c .L0 
     /tmp/ccAx1cNV.s:1147   .text:000000000000049c .L0 
     /tmp/ccAx1cNV.s:1152   .text:00000000000004a0 .L0 
  src/../h/riscv.hpp:183    .text:00000000000004a0 .L0 
     /tmp/ccAx1cNV.s:1162   .text:00000000000004a4 .L0 
     /tmp/ccAx1cNV.s:1163   .text:00000000000004a4 .L0 
     /tmp/ccAx1cNV.s:1168   .text:00000000000004a8 .L0 
  src/../h/riscv.hpp:127    .text:00000000000004a8 .L0 
     /tmp/ccAx1cNV.s:1175   .text:00000000000004ac .L0 
     /tmp/ccAx1cNV.s:1184   .text:00000000000004b0 .L0 
     /tmp/ccAx1cNV.s:1190   .text:00000000000004b0 _ZN5Riscv27handleSupervisorTrapConsoleEv
     /tmp/ccAx1cNV.s:1193   .text:00000000000004b0 .L0 
     /tmp/ccAx1cNV.s:1195   .text:00000000000004b0 .L0 
     /tmp/ccAx1cNV.s:1196   .text:00000000000004b4 .L0 
     /tmp/ccAx1cNV.s:1199   .text:00000000000004bc .L0 
     /tmp/ccAx1cNV.s:1200   .text:00000000000004bc .L0 
     /tmp/ccAx1cNV.s:1202   .text:00000000000004c0 .L0 
     /tmp/ccAx1cNV.s:1204   .text:00000000000004c0 .L0 
     /tmp/ccAx1cNV.s:1205   .text:00000000000004c0 .L0 
     /tmp/ccAx1cNV.s:1208   .text:00000000000004c8 .L0 
     /tmp/ccAx1cNV.s:1209   .text:00000000000004cc .L0 
     /tmp/ccAx1cNV.s:1211   .text:00000000000004d0 .L0 
     /tmp/ccAx1cNV.s:1212   .text:00000000000004d0 .L0 
     /tmp/ccAx1cNV.s:1214   .text:00000000000004d4 .L0 
     /tmp/ccAx1cNV.s:1216   .text:00000000000004d8 .L0 
     /tmp/ccAx1cNV.s:1222   .text:00000000000004d8 _ZN5Riscv28handleSupervisorTimerHandlerEv
     /tmp/ccAx1cNV.s:1225   .text:00000000000004d8 .L0 
     /tmp/ccAx1cNV.s:1227   .text:00000000000004d8 .L0 
     /tmp/ccAx1cNV.s:1228   .text:00000000000004dc .L0 
     /tmp/ccAx1cNV.s:1230   .text:00000000000004e0 .L0 
     /tmp/ccAx1cNV.s:1232   .text:00000000000004e4 .L0 
     /tmp/ccAx1cNV.s:1237   .text:00000000000004e4 .L0 
     /tmp/ccAx1cNV.s:1238   .text:00000000000004e4 .L0 
     /tmp/ccAx1cNV.s:1239   .text:00000000000004e4 .L0 
     /tmp/ccAx1cNV.s:1249   .text:00000000000004ec .L0 
     /tmp/ccAx1cNV.s:1250   .text:00000000000004f0 .L0 
     /tmp/ccAx1cNV.s:1251   .text:00000000000004f0 .L0 
     /tmp/ccAx1cNV.s:1253   .text:00000000000004f4 .L0 
     /tmp/ccAx1cNV.s:1255   .text:00000000000004f8 .L0 
     /tmp/ccAx1cNV.s:1267   .text:00000000000004f8 .L0 
     /tmp/ccAx1cNV.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccAx1cNV.s:194    .text:00000000000000a4 .L0 
     /tmp/ccAx1cNV.s:872    .text:00000000000002bc .L0 
     /tmp/ccAx1cNV.s:47     .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccAx1cNV.s:888    .text:00000000000002e8 .L0 
     /tmp/ccAx1cNV.s:50     .rodata.str1.8:0000000000000030 .LC2
     /tmp/ccAx1cNV.s:893    .text:00000000000002f8 .L0 
     /tmp/ccAx1cNV.s:53     .rodata.str1.8:0000000000000038 .LC3
     /tmp/ccAx1cNV.s:904    .text:000000000000030c .L0 
     /tmp/ccAx1cNV.s:56     .rodata.str1.8:0000000000000058 .LC4
     /tmp/ccAx1cNV.s:909    .text:000000000000031c .L0 
     /tmp/ccAx1cNV.s:59     .rodata.str1.8:0000000000000060 .LC5
     /tmp/ccAx1cNV.s:937    .text:000000000000034c .L0 
     /tmp/ccAx1cNV.s:965    .text:000000000000037c .L0 
     /tmp/ccAx1cNV.s:993    .text:00000000000003ac .L0 
     /tmp/ccAx1cNV.s:62     .rodata.str1.8:0000000000000068 .LC6
GAS LISTING /tmp/ccAx1cNV.s 			page 40


     /tmp/ccAx1cNV.s:1004   .text:00000000000003c0 .L0 
     /tmp/ccAx1cNV.s:1009   .text:00000000000003d0 .L0 
     /tmp/ccAx1cNV.s:1037   .text:0000000000000400 .L0 
     /tmp/ccAx1cNV.s:1065   .text:0000000000000430 .L0 
     /tmp/ccAx1cNV.s:1093   .text:0000000000000460 .L0 
     /tmp/ccAx1cNV.s:212    .text:00000000000000d4 .L32
     /tmp/ccAx1cNV.s:853    .text:00000000000002bc .L33
     /tmp/ccAx1cNV.s:900    .text:000000000000030c .L34
     /tmp/ccAx1cNV.s:1000   .text:00000000000003c0 .L35
     /tmp/ccAx1cNV.s:1100   .text:0000000000000474 .L36
     /tmp/ccAx1cNV.s:208    .text:00000000000000d0 .L29
     /tmp/ccAx1cNV.s:501    .text:000000000000016c .L37
     /tmp/ccAx1cNV.s:594    .text:00000000000001b4 .L38
     /tmp/ccAx1cNV.s:619    .text:00000000000001c8 .L39
     /tmp/ccAx1cNV.s:657    .text:00000000000001f0 .L40
     /tmp/ccAx1cNV.s:674    .text:0000000000000200 .L41
     /tmp/ccAx1cNV.s:681    .text:000000000000020c .L42
     /tmp/ccAx1cNV.s:721    .text:000000000000023c .L43
     /tmp/ccAx1cNV.s:743    .text:0000000000000250 .L44
     /tmp/ccAx1cNV.s:764    .text:0000000000000264 .L45
     /tmp/ccAx1cNV.s:785    .text:0000000000000278 .L46
     /tmp/ccAx1cNV.s:806    .text:000000000000028c .L47
     /tmp/ccAx1cNV.s:823    .text:000000000000029c .L48
     /tmp/ccAx1cNV.s:837    .text:00000000000002b0 .L49
     /tmp/ccAx1cNV.s:534    .text:0000000000000180 .L6
     /tmp/ccAx1cNV.s:556    .text:0000000000000190 .L20
     /tmp/ccAx1cNV.s:715    .text:0000000000000234 .L30
     /tmp/ccAx1cNV.s:703    .text:000000000000022c .L12
     /tmp/ccAx1cNV.s:896    .text:0000000000000308 .L23
     /tmp/ccAx1cNV.s:996    .text:00000000000003bc .L25
     /tmp/ccAx1cNV.s:1096   .text:0000000000000470 .L27
     /tmp/ccAx1cNV.s:570    .text:0000000000000194 .L3
     /tmp/ccAx1cNV.s:3517   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccAx1cNV.s:5243   .debug_str:0000000000000898 .LASF191
     /tmp/ccAx1cNV.s:5303   .debug_str:0000000000000b0f .LASF192
     /tmp/ccAx1cNV.s:5265   .debug_str:00000000000009fc .LASF193
     /tmp/ccAx1cNV.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccAx1cNV.s:1258   .text:00000000000004f8 .Letext0
     /tmp/ccAx1cNV.s:4929   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccAx1cNV.s:5063   .debug_str:000000000000037b .LASF0
     /tmp/ccAx1cNV.s:5087   .debug_str:000000000000041d .LASF1
     /tmp/ccAx1cNV.s:5181   .debug_str:00000000000006da .LASF2
     /tmp/ccAx1cNV.s:5189   .debug_str:0000000000000710 .LASF4
     /tmp/ccAx1cNV.s:5075   .debug_str:00000000000003cb .LASF3
     /tmp/ccAx1cNV.s:4937   .debug_str:0000000000000022 .LASF5
     /tmp/ccAx1cNV.s:5155   .debug_str:0000000000000634 .LASF6
     /tmp/ccAx1cNV.s:5147   .debug_str:00000000000005e5 .LASF7
     /tmp/ccAx1cNV.s:5079   .debug_str:00000000000003e9 .LASF8
     /tmp/ccAx1cNV.s:5035   .debug_str:00000000000002b6 .LASF9
     /tmp/ccAx1cNV.s:5043   .debug_str:00000000000002f7 .LASF10
     /tmp/ccAx1cNV.s:4973   .debug_str:0000000000000129 .LASF11
     /tmp/ccAx1cNV.s:5027   .debug_str:000000000000028f .LASF12
     /tmp/ccAx1cNV.s:4989   .debug_str:000000000000017d .LASF13
     /tmp/ccAx1cNV.s:4971   .debug_str:0000000000000119 .LASF14
     /tmp/ccAx1cNV.s:5221   .debug_str:00000000000007e0 .LASF15
     /tmp/ccAx1cNV.s:5011   .debug_str:0000000000000206 .LASF16
     /tmp/ccAx1cNV.s:5207   .debug_str:0000000000000782 .LASF17
GAS LISTING /tmp/ccAx1cNV.s 			page 41


     /tmp/ccAx1cNV.s:4977   .debug_str:000000000000013d .LASF23
     /tmp/ccAx1cNV.s:4951   .debug_str:0000000000000083 .LASF18
     /tmp/ccAx1cNV.s:4975   .debug_str:0000000000000138 .LASF19
     /tmp/ccAx1cNV.s:5085   .debug_str:0000000000000418 .LASF20
     /tmp/ccAx1cNV.s:5129   .debug_str:0000000000000542 .LASF21
     /tmp/ccAx1cNV.s:5103   .debug_str:0000000000000484 .LASF22
     /tmp/ccAx1cNV.s:5143   .debug_str:00000000000005b2 .LASF29
     /tmp/ccAx1cNV.s:5173   .debug_str:00000000000006b4 .LASF67
     /tmp/ccAx1cNV.s:5113   .debug_str:00000000000004bd .LASF24
     /tmp/ccAx1cNV.s:4941   .debug_str:0000000000000034 .LASF26
     /tmp/ccAx1cNV.s:5225   .debug_str:00000000000007f3 .LASF25
     /tmp/ccAx1cNV.s:5115   .debug_str:00000000000004c7 .LASF27
     /tmp/ccAx1cNV.s:5071   .debug_str:00000000000003af .LASF38
     /tmp/ccAx1cNV.s:5239   .debug_str:0000000000000860 .LASF39
     /tmp/ccAx1cNV.s:5203   .debug_str:0000000000000765 .LASF57
     /tmp/ccAx1cNV.s:4991   .debug_str:000000000000018d .LASF59
     /tmp/ccAx1cNV.s:5281   .debug_str:0000000000000a88 .LASF28
     /tmp/ccAx1cNV.s:5261   .debug_str:00000000000009e1 .LASF102
     /tmp/ccAx1cNV.s:5157   .debug_str:000000000000063b .LASF30
     /tmp/ccAx1cNV.s:4969   .debug_str:0000000000000113 .LASF31
     /tmp/ccAx1cNV.s:5201   .debug_str:000000000000075d .LASF32
     /tmp/ccAx1cNV.s:4979   .debug_str:0000000000000147 .LASF33
     /tmp/ccAx1cNV.s:4931   .debug_str:0000000000000000 .LASF34
     /tmp/ccAx1cNV.s:4963   .debug_str:00000000000000e8 .LASF35
     /tmp/ccAx1cNV.s:5039   .debug_str:00000000000002d6 .LASF36
     /tmp/ccAx1cNV.s:4981   .debug_str:0000000000000150 .LASF37
     /tmp/ccAx1cNV.s:4933   .debug_str:0000000000000008 .LASF40
     /tmp/ccAx1cNV.s:5253   .debug_str:000000000000099a .LASF79
     /tmp/ccAx1cNV.s:5291   .debug_str:0000000000000abb .LASF41
     /tmp/ccAx1cNV.s:5315   .debug_str:0000000000000b59 .LASF42
     /tmp/ccAx1cNV.s:4987   .debug_str:0000000000000174 .LASF45
     /tmp/ccAx1cNV.s:5233   .debug_str:0000000000000828 .LASF47
     /tmp/ccAx1cNV.s:4993   .debug_str:00000000000001ad .LASF43
     /tmp/ccAx1cNV.s:4967   .debug_str:00000000000000ff .LASF44
     /tmp/ccAx1cNV.s:4943   .debug_str:0000000000000055 .LASF46
     /tmp/ccAx1cNV.s:5235   .debug_str:000000000000083c .LASF48
     /tmp/ccAx1cNV.s:5287   .debug_str:0000000000000aa1 .LASF49
     /tmp/ccAx1cNV.s:5013   .debug_str:000000000000021c .LASF50
     /tmp/ccAx1cNV.s:5179   .debug_str:00000000000006d0 .LASF51
     /tmp/ccAx1cNV.s:5231   .debug_str:0000000000000813 .LASF52
     /tmp/ccAx1cNV.s:5101   .debug_str:000000000000047a .LASF53
     /tmp/ccAx1cNV.s:5049   .debug_str:0000000000000325 .LASF54
     /tmp/ccAx1cNV.s:5317   .debug_str:0000000000000b65 .LASF55
     /tmp/ccAx1cNV.s:5133   .debug_str:0000000000000551 .LASF56
     /tmp/ccAx1cNV.s:5139   .debug_str:000000000000059d .LASF194
     /tmp/ccAx1cNV.s:5089   .debug_str:0000000000000430 .LASF58
     /tmp/ccAx1cNV.s:5091   .debug_str:0000000000000436 .LASF60
     /tmp/ccAx1cNV.s:4997   .debug_str:00000000000001c9 .LASF61
     /tmp/ccAx1cNV.s:4947   .debug_str:000000000000006a .LASF62
     /tmp/ccAx1cNV.s:5197   .debug_str:000000000000073f .LASF63
     /tmp/ccAx1cNV.s:5205   .debug_str:000000000000076e .LASF64
     /tmp/ccAx1cNV.s:5185   .debug_str:00000000000006fc .LASF65
     /tmp/ccAx1cNV.s:5145   .debug_str:00000000000005c2 .LASF66
     /tmp/ccAx1cNV.s:5033   .debug_str:00000000000002ae .LASF68
     /tmp/ccAx1cNV.s:5319   .debug_str:0000000000000b73 .LASF69
     /tmp/ccAx1cNV.s:5109   .debug_str:000000000000049b .LASF117
     /tmp/ccAx1cNV.s:5277   .debug_str:0000000000000a69 .LASF119
GAS LISTING /tmp/ccAx1cNV.s 			page 42


     /tmp/ccAx1cNV.s:4935   .debug_str:000000000000001d .LASF70
     /tmp/ccAx1cNV.s:5269   .debug_str:0000000000000a22 .LASF71
     /tmp/ccAx1cNV.s:5105   .debug_str:0000000000000489 .LASF72
     /tmp/ccAx1cNV.s:5257   .debug_str:00000000000009c4 .LASF73
     /tmp/ccAx1cNV.s:5003   .debug_str:00000000000001de .LASF74
     /tmp/ccAx1cNV.s:5001   .debug_str:00000000000001d7 .LASF75
     /tmp/ccAx1cNV.s:5301   .debug_str:0000000000000b08 .LASF76
     /tmp/ccAx1cNV.s:5095   .debug_str:000000000000044e .LASF77
     /tmp/ccAx1cNV.s:4965   .debug_str:00000000000000f1 .LASF157
     /tmp/ccAx1cNV.s:4953   .debug_str:0000000000000088 .LASF159
     /tmp/ccAx1cNV.s:5311   .debug_str:0000000000000b36 .LASF78
     /tmp/ccAx1cNV.s:4957   .debug_str:00000000000000b4 .LASF80
     /tmp/ccAx1cNV.s:4949   .debug_str:000000000000007d .LASF81
     /tmp/ccAx1cNV.s:5151   .debug_str:0000000000000601 .LASF82
     /tmp/ccAx1cNV.s:5187   .debug_str:0000000000000705 .LASF195
     /tmp/ccAx1cNV.s:5307   .debug_str:0000000000000b24 .LASF83
     /tmp/ccAx1cNV.s:5219   .debug_str:00000000000007db .LASF84
     /tmp/ccAx1cNV.s:5051   .debug_str:000000000000033b .LASF85
     /tmp/ccAx1cNV.s:5019   .debug_str:0000000000000257 .LASF86
     /tmp/ccAx1cNV.s:4945   .debug_str:0000000000000064 .LASF87
     /tmp/ccAx1cNV.s:4955   .debug_str:00000000000000a1 .LASF88
     /tmp/ccAx1cNV.s:5131   .debug_str:000000000000054c .LASF89
     /tmp/ccAx1cNV.s:5141   .debug_str:00000000000005a2 .LASF90
     /tmp/ccAx1cNV.s:4999   .debug_str:00000000000001d2 .LASF91
     /tmp/ccAx1cNV.s:5073   .debug_str:00000000000003b9 .LASF92
     /tmp/ccAx1cNV.s:5223   .debug_str:00000000000007ec .LASF93
     /tmp/ccAx1cNV.s:5025   .debug_str:000000000000027b .LASF94
     /tmp/ccAx1cNV.s:5279   .debug_str:0000000000000a80 .LASF95
     /tmp/ccAx1cNV.s:5125   .debug_str:0000000000000526 .LASF96
     /tmp/ccAx1cNV.s:5251   .debug_str:0000000000000991 .LASF97
     /tmp/ccAx1cNV.s:5327   .debug_str:0000000000000ba0 .LASF98
     /tmp/ccAx1cNV.s:5237   .debug_str:0000000000000857 .LASF99
     /tmp/ccAx1cNV.s:5183   .debug_str:00000000000006e8 .LASF100
     /tmp/ccAx1cNV.s:4961   .debug_str:00000000000000e1 .LASF168
     /tmp/ccAx1cNV.s:5285   .debug_str:0000000000000a9b .LASF101
     /tmp/ccAx1cNV.s:5167   .debug_str:0000000000000689 .LASF103
     /tmp/ccAx1cNV.s:5083   .debug_str:000000000000040f .LASF104
     /tmp/ccAx1cNV.s:5007   .debug_str:00000000000001ea .LASF105
     /tmp/ccAx1cNV.s:5295   .debug_str:0000000000000ac8 .LASF106
     /tmp/ccAx1cNV.s:5273   .debug_str:0000000000000a55 .LASF107
     /tmp/ccAx1cNV.s:5023   .debug_str:000000000000026f .LASF108
     /tmp/ccAx1cNV.s:5241   .debug_str:000000000000088b .LASF109
     /tmp/ccAx1cNV.s:5055   .debug_str:0000000000000348 .LASF110
     /tmp/ccAx1cNV.s:5047   .debug_str:000000000000031a .LASF111
     /tmp/ccAx1cNV.s:5059   .debug_str:000000000000035a .LASF112
     /tmp/ccAx1cNV.s:5195   .debug_str:0000000000000731 .LASF113
     /tmp/ccAx1cNV.s:5017   .debug_str:000000000000023c .LASF114
     /tmp/ccAx1cNV.s:5065   .debug_str:0000000000000388 .LASF115
     /tmp/ccAx1cNV.s:5297   .debug_str:0000000000000ad1 .LASF116
     /tmp/ccAx1cNV.s:5267   .debug_str:0000000000000a19 .LASF118
     /tmp/ccAx1cNV.s:5259   .debug_str:00000000000009cc .LASF120
     /tmp/ccAx1cNV.s:5177   .debug_str:00000000000006c7 .LASF121
     /tmp/ccAx1cNV.s:5137   .debug_str:0000000000000588 .LASF122
     /tmp/ccAx1cNV.s:5159   .debug_str:0000000000000643 .LASF123
     /tmp/ccAx1cNV.s:5163   .debug_str:0000000000000662 .LASF124
     /tmp/ccAx1cNV.s:5127   .debug_str:000000000000053b .LASF125
     /tmp/ccAx1cNV.s:5081   .debug_str:00000000000003fc .LASF126
GAS LISTING /tmp/ccAx1cNV.s 			page 43


     /tmp/ccAx1cNV.s:5119   .debug_str:0000000000000511 .LASF127
     /tmp/ccAx1cNV.s:5247   .debug_str:0000000000000961 .LASF128
     /tmp/ccAx1cNV.s:5121   .debug_str:0000000000000519 .LASF129
     /tmp/ccAx1cNV.s:5135   .debug_str:0000000000000574 .LASF130
     /tmp/ccAx1cNV.s:5061   .debug_str:0000000000000372 .LASF131
     /tmp/ccAx1cNV.s:5313   .debug_str:0000000000000b44 .LASF132
     /tmp/ccAx1cNV.s:5321   .debug_str:0000000000000b78 .LASF133
     /tmp/ccAx1cNV.s:5199   .debug_str:0000000000000748 .LASF134
     /tmp/ccAx1cNV.s:5093   .debug_str:0000000000000446 .LASF135
     /tmp/ccAx1cNV.s:5165   .debug_str:0000000000000675 .LASF136
     /tmp/ccAx1cNV.s:5211   .debug_str:00000000000007b0 .LASF137
     /tmp/ccAx1cNV.s:5069   .debug_str:000000000000039b .LASF138
     /tmp/ccAx1cNV.s:5169   .debug_str:0000000000000694 .LASF139
     /tmp/ccAx1cNV.s:5191   .debug_str:0000000000000717 .LASF140
     /tmp/ccAx1cNV.s:5193   .debug_str:000000000000072a .LASF141
     /tmp/ccAx1cNV.s:5009   .debug_str:00000000000001f3 .LASF142
     /tmp/ccAx1cNV.s:5005   .debug_str:00000000000001e4 .LASF143
     /tmp/ccAx1cNV.s:5229   .debug_str:0000000000000801 .LASF144
     /tmp/ccAx1cNV.s:5067   .debug_str:0000000000000395 .LASF145
     /tmp/ccAx1cNV.s:4995   .debug_str:00000000000001b7 .LASF146
     /tmp/ccAx1cNV.s:4939   .debug_str:0000000000000029 .LASF147
     /tmp/ccAx1cNV.s:5209   .debug_str:0000000000000798 .LASF148
     /tmp/ccAx1cNV.s:5029   .debug_str:000000000000029e .LASF149
     /tmp/ccAx1cNV.s:5161   .debug_str:000000000000064a .LASF150
     /tmp/ccAx1cNV.s:5289   .debug_str:0000000000000ab1 .LASF151
     /tmp/ccAx1cNV.s:4985   .debug_str:000000000000015e .LASF152
     /tmp/ccAx1cNV.s:5283   .debug_str:0000000000000a91 .LASF153
     /tmp/ccAx1cNV.s:5111   .debug_str:00000000000004a7 .LASF154
     /tmp/ccAx1cNV.s:5263   .debug_str:00000000000009ed .LASF155
     /tmp/ccAx1cNV.s:5041   .debug_str:00000000000002db .LASF156
     /tmp/ccAx1cNV.s:5255   .debug_str:00000000000009ae .LASF158
     /tmp/ccAx1cNV.s:5153   .debug_str:0000000000000611 .LASF160
     /tmp/ccAx1cNV.s:5249   .debug_str:0000000000000975 .LASF161
     /tmp/ccAx1cNV.s:5117   .debug_str:00000000000004e8 .LASF162
     /tmp/ccAx1cNV.s:5299   .debug_str:0000000000000aeb .LASF163
     /tmp/ccAx1cNV.s:5271   .debug_str:0000000000000a2b .LASF164
     /tmp/ccAx1cNV.s:5325   .debug_str:0000000000000b94 .LASF165
     /tmp/ccAx1cNV.s:5077   .debug_str:00000000000003dd .LASF196
     /tmp/ccAx1cNV.s:5175   .debug_str:00000000000006c0 .LASF166
     /tmp/ccAx1cNV.s:5045   .debug_str:0000000000000305 .LASF167
     /tmp/ccAx1cNV.s:5215   .debug_str:00000000000007bf .LASF169
     /tmp/ccAx1cNV.s:5123   .debug_str:0000000000000521 .LASF170
     /tmp/ccAx1cNV.s:4983   .debug_str:0000000000000158 .LASF171
     /tmp/ccAx1cNV.s:5171   .debug_str:000000000000069b .LASF172
     /tmp/ccAx1cNV.s:5217   .debug_str:00000000000007c4 .LASF197
     /tmp/ccAx1cNV.s:5097   .debug_str:0000000000000458 .LASF198
     /tmp/ccAx1cNV.s:1223   .text:00000000000004d8 .LFB52
     /tmp/ccAx1cNV.s:1256   .text:00000000000004f8 .LFE52
     /tmp/ccAx1cNV.s:5031   .debug_str:00000000000002a9 .LASF173
     /tmp/ccAx1cNV.s:1235   .text:00000000000004e4 .LBB249
     /tmp/ccAx1cNV.s:1247   .text:00000000000004ec .LBE249
     /tmp/ccAx1cNV.s:4579   .debug_loc:0000000000000000 .LLST33
     /tmp/ccAx1cNV.s:1191   .text:00000000000004b0 .LFB51
     /tmp/ccAx1cNV.s:1217   .text:00000000000004d8 .LFE51
     /tmp/ccAx1cNV.s:4587   .debug_loc:0000000000000024 .LLST32
     /tmp/ccAx1cNV.s:1206   .text:00000000000004c8 .LVL81
     /tmp/ccAx1cNV.s:69     .text:0000000000000020 .LFB50
GAS LISTING /tmp/ccAx1cNV.s 			page 44


     /tmp/ccAx1cNV.s:1185   .text:00000000000004b0 .LFE50
     /tmp/ccAx1cNV.s:5213   .debug_str:00000000000007b8 .LASF174
     /tmp/ccAx1cNV.s:4601   .debug_loc:000000000000005d .LLST0
     /tmp/ccAx1cNV.s:5015   .debug_str:0000000000000237 .LASF175
     /tmp/ccAx1cNV.s:4632   .debug_loc:00000000000000e3 .LLST1
     /tmp/ccAx1cNV.s:4893   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccAx1cNV.s:5293   .debug_str:0000000000000ac0 .LASF176
     /tmp/ccAx1cNV.s:4649   .debug_loc:000000000000012f .LLST3
     /tmp/ccAx1cNV.s:5245   .debug_str:000000000000095c .LASF177
     /tmp/ccAx1cNV.s:4660   .debug_loc:0000000000000165 .LLST4
     /tmp/ccAx1cNV.s:515    .text:000000000000016c .LBB202
     /tmp/ccAx1cNV.s:535    .text:0000000000000180 .LBE202
     /tmp/ccAx1cNV.s:4671   .debug_loc:000000000000019b .LLST28
     /tmp/ccAx1cNV.s:4686   .debug_loc:00000000000001d5 .LLST29
     /tmp/ccAx1cNV.s:525    .text:000000000000017c .LVL11
     /tmp/ccAx1cNV.s:600    .text:00000000000001b4 .LBB190
     /tmp/ccAx1cNV.s:616    .text:00000000000001c4 .LBE190
     /tmp/ccAx1cNV.s:4693   .debug_loc:00000000000001f8 .LLST26
     /tmp/ccAx1cNV.s:4700   .debug_loc:000000000000021b .LLST27
     /tmp/ccAx1cNV.s:608    .text:00000000000001c0 .LVL19
     /tmp/ccAx1cNV.s:621    .text:00000000000001c8 .LBB179
     /tmp/ccAx1cNV.s:654    .text:00000000000001ec .LBE179
     /tmp/ccAx1cNV.s:5305   .debug_str:0000000000000b1d .LASF178
     /tmp/ccAx1cNV.s:4707   .debug_loc:000000000000023e .LLST21
     /tmp/ccAx1cNV.s:4714   .debug_loc:0000000000000261 .LLST22
     /tmp/ccAx1cNV.s:4721   .debug_loc:0000000000000284 .LLST23
     /tmp/ccAx1cNV.s:5107   .debug_str:000000000000048f .LASF179
     /tmp/ccAx1cNV.s:4728   .debug_loc:00000000000002a7 .LLST24
     /tmp/ccAx1cNV.s:4735   .debug_loc:00000000000002ca .LLST25
     /tmp/ccAx1cNV.s:641    .text:00000000000001e0 .LVL25
     /tmp/ccAx1cNV.s:659    .text:00000000000001f0 .LBB169
     /tmp/ccAx1cNV.s:671    .text:00000000000001fc .LBE169
     /tmp/ccAx1cNV.s:4743   .debug_loc:00000000000002ee .LLST20
     /tmp/ccAx1cNV.s:663    .text:00000000000001f8 .LVL28
     /tmp/ccAx1cNV.s:4750   .debug_loc:0000000000000311 .LLST17
     /tmp/ccAx1cNV.s:4959   .debug_str:00000000000000dc .LASF180
     /tmp/ccAx1cNV.s:4757   .debug_loc:0000000000000334 .LLST18
     /tmp/ccAx1cNV.s:4764   .debug_loc:0000000000000357 .LLST19
     /tmp/ccAx1cNV.s:696    .text:0000000000000220 .LVL33
     /tmp/ccAx1cNV.s:724    .text:000000000000023c .LBB145
     /tmp/ccAx1cNV.s:740    .text:000000000000024c .LBE145
     /tmp/ccAx1cNV.s:4771   .debug_loc:000000000000037a .LLST15
     /tmp/ccAx1cNV.s:4778   .debug_loc:000000000000039d .LLST16
     /tmp/ccAx1cNV.s:732    .text:0000000000000248 .LVL38
     /tmp/ccAx1cNV.s:745    .text:0000000000000250 .LBB139
     /tmp/ccAx1cNV.s:761    .text:0000000000000260 .LBE139
     /tmp/ccAx1cNV.s:4785   .debug_loc:00000000000003c0 .LLST13
     /tmp/ccAx1cNV.s:4792   .debug_loc:00000000000003e3 .LLST14
     /tmp/ccAx1cNV.s:753    .text:000000000000025c .LVL41
     /tmp/ccAx1cNV.s:766    .text:0000000000000264 .LBB134
     /tmp/ccAx1cNV.s:782    .text:0000000000000274 .LBE134
     /tmp/ccAx1cNV.s:4799   .debug_loc:0000000000000406 .LLST11
     /tmp/ccAx1cNV.s:4806   .debug_loc:0000000000000429 .LLST12
     /tmp/ccAx1cNV.s:774    .text:0000000000000270 .LVL44
     /tmp/ccAx1cNV.s:787    .text:0000000000000278 .LBB130
     /tmp/ccAx1cNV.s:803    .text:0000000000000288 .LBE130
     /tmp/ccAx1cNV.s:4813   .debug_loc:000000000000044c .LLST9
GAS LISTING /tmp/ccAx1cNV.s 			page 45


     /tmp/ccAx1cNV.s:4820   .debug_loc:000000000000046f .LLST10
     /tmp/ccAx1cNV.s:795    .text:0000000000000284 .LVL47
     /tmp/ccAx1cNV.s:808    .text:000000000000028c .LBB127
     /tmp/ccAx1cNV.s:820    .text:0000000000000298 .LBE127
     /tmp/ccAx1cNV.s:4827   .debug_loc:0000000000000492 .LLST8
     /tmp/ccAx1cNV.s:812    .text:0000000000000294 .LVL49
     /tmp/ccAx1cNV.s:825    .text:000000000000029c .LBB124
     /tmp/ccAx1cNV.s:835    .text:00000000000002ac .LBE124
     /tmp/ccAx1cNV.s:4834   .debug_loc:00000000000004b5 .LLST6
     /tmp/ccAx1cNV.s:834    .text:00000000000002ac .LVL52
     /tmp/ccAx1cNV.s:219    .text:00000000000000d4 .LBB106
     /tmp/ccAx1cNV.s:235    .text:00000000000000e0 .LBE106
     /tmp/ccAx1cNV.s:237    .text:00000000000000e0 .LBB108
     /tmp/ccAx1cNV.s:252    .text:00000000000000ec .LBE108
     /tmp/ccAx1cNV.s:488    .text:0000000000000160 .LBB122
     /tmp/ccAx1cNV.s:503    .text:000000000000016c .LBE122
     /tmp/ccAx1cNV.s:4841   .debug_loc:00000000000004d8 .LLST5
     /tmp/ccAx1cNV.s:840    .text:00000000000002b0 .LBB125
     /tmp/ccAx1cNV.s:855    .text:00000000000002bc .LBE125
     /tmp/ccAx1cNV.s:4850   .debug_loc:00000000000004fe .LLST7
     /tmp/ccAx1cNV.s:546    .text:000000000000018c .LBB215
     /tmp/ccAx1cNV.s:558    .text:0000000000000190 .LBE215
     /tmp/ccAx1cNV.s:4859   .debug_loc:0000000000000524 .LLST30
     /tmp/ccAx1cNV.s:560    .text:0000000000000190 .LBB217
     /tmp/ccAx1cNV.s:572    .text:0000000000000194 .LBE217
     /tmp/ccAx1cNV.s:4866   .debug_loc:0000000000000547 .LLST31
     /tmp/ccAx1cNV.s:679    .text:0000000000000208 .LVL30
     /tmp/ccAx1cNV.s:1102   .text:0000000000000474 .LBB75
     /tmp/ccAx1cNV.s:1178   .text:00000000000004b0 .LBE75
     /tmp/ccAx1cNV.s:1104   .text:0000000000000474 .LBB76
     /tmp/ccAx1cNV.s:1119   .text:0000000000000480 .LBE76
     /tmp/ccAx1cNV.s:1123   .text:0000000000000484 .LBB78
     /tmp/ccAx1cNV.s:1138   .text:0000000000000490 .LBE78
     /tmp/ccAx1cNV.s:1149   .text:00000000000004a0 .LBB80
     /tmp/ccAx1cNV.s:1160   .text:00000000000004a4 .LBE80
     /tmp/ccAx1cNV.s:4873   .debug_loc:000000000000056a .LLST2
     /tmp/ccAx1cNV.s:1165   .text:00000000000004a8 .LBB82
     /tmp/ccAx1cNV.s:1177   .text:00000000000004b0 .LBE82
     /tmp/ccAx1cNV.s:1144   .text:000000000000049c .LVL76
     /tmp/ccAx1cNV.s:98     .text:0000000000000048 .LBB68
     /tmp/ccAx1cNV.s:115    .text:0000000000000054 .LBE68
     /tmp/ccAx1cNV.s:1013   .text:00000000000003e0 .LBB84
     /tmp/ccAx1cNV.s:1028   .text:00000000000003ec .LBE84
     /tmp/ccAx1cNV.s:1041   .text:0000000000000410 .LBB86
     /tmp/ccAx1cNV.s:1056   .text:000000000000041c .LBE86
     /tmp/ccAx1cNV.s:1069   .text:0000000000000440 .LBB88
     /tmp/ccAx1cNV.s:1084   .text:000000000000044c .LBE88
     /tmp/ccAx1cNV.s:913    .text:000000000000032c .LBB92
     /tmp/ccAx1cNV.s:928    .text:0000000000000338 .LBE92
     /tmp/ccAx1cNV.s:941    .text:000000000000035c .LBB94
     /tmp/ccAx1cNV.s:956    .text:0000000000000368 .LBE94
     /tmp/ccAx1cNV.s:969    .text:000000000000038c .LBB96
     /tmp/ccAx1cNV.s:984    .text:0000000000000398 .LBE96
     /tmp/ccAx1cNV.s:196    .text:00000000000000b4 .LVL2
     /tmp/ccAx1cNV.s:202    .text:00000000000000c4 .LVL3
     /tmp/ccAx1cNV.s:207    .text:00000000000000d0 .LVL4
     /tmp/ccAx1cNV.s:874    .text:00000000000002cc .LVL55
GAS LISTING /tmp/ccAx1cNV.s 			page 46


     /tmp/ccAx1cNV.s:880    .text:00000000000002dc .LVL56
     /tmp/ccAx1cNV.s:885    .text:00000000000002e8 .LVL57
     /tmp/ccAx1cNV.s:890    .text:00000000000002f8 .LVL58
     /tmp/ccAx1cNV.s:895    .text:0000000000000308 .LVL59
     /tmp/ccAx1cNV.s:906    .text:000000000000031c .LVL60
     /tmp/ccAx1cNV.s:911    .text:000000000000032c .LVL61
     /tmp/ccAx1cNV.s:934    .text:000000000000034c .LVL62
     /tmp/ccAx1cNV.s:939    .text:000000000000035c .LVL63
     /tmp/ccAx1cNV.s:962    .text:000000000000037c .LVL64
     /tmp/ccAx1cNV.s:967    .text:000000000000038c .LVL65
     /tmp/ccAx1cNV.s:990    .text:00000000000003ac .LVL66
     /tmp/ccAx1cNV.s:995    .text:00000000000003bc .LVL67
     /tmp/ccAx1cNV.s:1006   .text:00000000000003d0 .LVL68
     /tmp/ccAx1cNV.s:1011   .text:00000000000003e0 .LVL69
     /tmp/ccAx1cNV.s:1034   .text:0000000000000400 .LVL70
     /tmp/ccAx1cNV.s:1039   .text:0000000000000410 .LVL71
     /tmp/ccAx1cNV.s:1062   .text:0000000000000430 .LVL72
     /tmp/ccAx1cNV.s:1067   .text:0000000000000440 .LVL73
     /tmp/ccAx1cNV.s:1090   .text:0000000000000460 .LVL74
     /tmp/ccAx1cNV.s:1095   .text:0000000000000470 .LVL75
     /tmp/ccAx1cNV.s:5227   .debug_str:00000000000007fc .LASF181
     /tmp/ccAx1cNV.s:10     .text:0000000000000000 .LFB49
     /tmp/ccAx1cNV.s:40     .text:0000000000000020 .LFE49
     /tmp/ccAx1cNV.s:5275   .debug_str:0000000000000a64 .LASF182
     /tmp/ccAx1cNV.s:5057   .debug_str:0000000000000354 .LASF183
     /tmp/ccAx1cNV.s:5037   .debug_str:00000000000002c6 .LASF184
     /tmp/ccAx1cNV.s:5053   .debug_str:0000000000000341 .LASF185
     /tmp/ccAx1cNV.s:5099   .debug_str:0000000000000473 .LASF186
     /tmp/ccAx1cNV.s:5323   .debug_str:0000000000000b81 .LASF187
     /tmp/ccAx1cNV.s:5309   .debug_str:0000000000000b2a .LASF188
     /tmp/ccAx1cNV.s:5021   .debug_str:0000000000000260 .LASF189
     /tmp/ccAx1cNV.s:5149   .debug_str:00000000000005f8 .LASF190
     /tmp/ccAx1cNV.s:1234   .text:00000000000004e4 .LVL83
     /tmp/ccAx1cNV.s:1244   .text:00000000000004ec .LVL84
     /tmp/ccAx1cNV.s:1194   .text:00000000000004b0 .LVL80
     /tmp/ccAx1cNV.s:113    .text:0000000000000054 .LVL0
     /tmp/ccAx1cNV.s:532    .text:0000000000000180 .LVL12
     /tmp/ccAx1cNV.s:593    .text:00000000000001b4 .LVL17
     /tmp/ccAx1cNV.s:625    .text:00000000000001cc .LVL21
     /tmp/ccAx1cNV.s:656    .text:00000000000001f0 .LVL27
     /tmp/ccAx1cNV.s:687    .text:0000000000000210 .LVL31
     /tmp/ccAx1cNV.s:720    .text:000000000000023c .LVL36
     /tmp/ccAx1cNV.s:123    .text:0000000000000058 .LVL1
     /tmp/ccAx1cNV.s:540    .text:0000000000000184 .LVL13
     /tmp/ccAx1cNV.s:568    .text:0000000000000194 .LVL16
     /tmp/ccAx1cNV.s:233    .text:00000000000000e0 .LVL5
     /tmp/ccAx1cNV.s:852    .text:00000000000002bc .LVL54
     /tmp/ccAx1cNV.s:255    .text:00000000000000f0 .LVL6
     /tmp/ccAx1cNV.s:519    .text:0000000000000170 .LVL9
     /tmp/ccAx1cNV.s:523    .text:0000000000000174 .LVL10
     /tmp/ccAx1cNV.s:604    .text:00000000000001b8 .LVL18
     /tmp/ccAx1cNV.s:618    .text:00000000000001c8 .LVL20
     /tmp/ccAx1cNV.s:629    .text:00000000000001d0 .LVL22
     /tmp/ccAx1cNV.s:633    .text:00000000000001d4 .LVL23
     /tmp/ccAx1cNV.s:637    .text:00000000000001d8 .LVL24
     /tmp/ccAx1cNV.s:645    .text:00000000000001e4 .LVL26
     /tmp/ccAx1cNV.s:673    .text:0000000000000200 .LVL29
GAS LISTING /tmp/ccAx1cNV.s 			page 47


     /tmp/ccAx1cNV.s:691    .text:0000000000000214 .LVL32
     /tmp/ccAx1cNV.s:704    .text:000000000000022c .LVL34
     /tmp/ccAx1cNV.s:714    .text:0000000000000234 .LVL35
     /tmp/ccAx1cNV.s:728    .text:0000000000000240 .LVL37
     /tmp/ccAx1cNV.s:742    .text:0000000000000250 .LVL39
     /tmp/ccAx1cNV.s:749    .text:0000000000000254 .LVL40
     /tmp/ccAx1cNV.s:763    .text:0000000000000264 .LVL42
     /tmp/ccAx1cNV.s:770    .text:0000000000000268 .LVL43
     /tmp/ccAx1cNV.s:784    .text:0000000000000278 .LVL45
     /tmp/ccAx1cNV.s:791    .text:000000000000027c .LVL46
     /tmp/ccAx1cNV.s:805    .text:000000000000028c .LVL48
     /tmp/ccAx1cNV.s:822    .text:000000000000029c .LVL50
     /tmp/ccAx1cNV.s:829    .text:00000000000002a0 .LVL51
     /tmp/ccAx1cNV.s:487    .text:0000000000000160 .LVL7
     /tmp/ccAx1cNV.s:500    .text:000000000000016c .LVL8
     /tmp/ccAx1cNV.s:839    .text:00000000000002b0 .LVL53
     /tmp/ccAx1cNV.s:545    .text:000000000000018c .LVL14
     /tmp/ccAx1cNV.s:554    .text:0000000000000190 .LVL15
     /tmp/ccAx1cNV.s:1148   .text:00000000000004a0 .LVL77
     /tmp/ccAx1cNV.s:1157   .text:00000000000004a4 .LVL78
     /tmp/ccAx1cNV.s:1268   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccAx1cNV.s:217    .text:00000000000000d4 .LBB105
     /tmp/ccAx1cNV.s:261    .text:00000000000000f8 .LBE105
     /tmp/ccAx1cNV.s:265    .text:00000000000000f8 .LBB220
     /tmp/ccAx1cNV.s:272    .text:0000000000000100 .LBE220
     /tmp/ccAx1cNV.s:276    .text:0000000000000100 .LBB221
     /tmp/ccAx1cNV.s:285    .text:0000000000000108 .LBE221
     /tmp/ccAx1cNV.s:289    .text:0000000000000108 .LBB222
     /tmp/ccAx1cNV.s:300    .text:0000000000000110 .LBE222
     /tmp/ccAx1cNV.s:304    .text:0000000000000110 .LBB223
     /tmp/ccAx1cNV.s:317    .text:0000000000000118 .LBE223
     /tmp/ccAx1cNV.s:321    .text:0000000000000118 .LBB224
     /tmp/ccAx1cNV.s:336    .text:0000000000000120 .LBE224
     /tmp/ccAx1cNV.s:340    .text:0000000000000120 .LBB225
     /tmp/ccAx1cNV.s:357    .text:0000000000000128 .LBE225
     /tmp/ccAx1cNV.s:361    .text:0000000000000128 .LBB226
     /tmp/ccAx1cNV.s:380    .text:0000000000000130 .LBE226
     /tmp/ccAx1cNV.s:384    .text:0000000000000130 .LBB227
     /tmp/ccAx1cNV.s:405    .text:0000000000000138 .LBE227
     /tmp/ccAx1cNV.s:409    .text:0000000000000138 .LBB228
     /tmp/ccAx1cNV.s:432    .text:0000000000000140 .LBE228
     /tmp/ccAx1cNV.s:436    .text:0000000000000140 .LBB229
     /tmp/ccAx1cNV.s:461    .text:0000000000000148 .LBE229
     /tmp/ccAx1cNV.s:465    .text:0000000000000148 .LBB230
     /tmp/ccAx1cNV.s:573    .text:0000000000000194 .LBE230
     /tmp/ccAx1cNV.s:597    .text:00000000000001b4 .LBB231
     /tmp/ccAx1cNV.s:868    .text:00000000000002bc .LBE231
     /tmp/ccAx1cNV.s:683    .text:000000000000020c .LBB152
     /tmp/ccAx1cNV.s:712    .text:0000000000000230 .LBE152
     /tmp/ccAx1cNV.s:716    .text:0000000000000234 .LBB153
     /tmp/ccAx1cNV.s:722    .text:000000000000023c .LBE153

UNDEFINED SYMBOLS
_Z11printStringPKc
__putc
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
GAS LISTING /tmp/ccAx1cNV.s 			page 48


_ZN3PCB13create_threadEPFvPvES0_Pm
_ZN3PCB11thread_exitEv
_ZN3PCB8dispatchEv
_ZN4_sem4openEj
_ZN4_sem5closeEPS_
_ZN4_sem4waitEPS_
_ZN4_sem6signalEPS_
_ZN4_sem7trywaitEPS_
__getc
_Z8printIntiii
console_handler
